//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.accumulo.core.compaction.protobuf";
option java_outer_classname = "CompactionCoordinatorServiceProto";

package compaction_coordinator;

// Interface exported by the server.
service CompactionCoordinatorService {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetCompactionJob(CompactionJobRequest) returns (PNextCompactionJob) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  //rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  //rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
 // rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

message PInfo {
  map<string, string> headers = 1;
}

// There are no nulls with Protobuf3, so the default will be an empty string
// Our TCredentials version with thrift currently is using/checking for null so
// using the optional field will generate "has" methods which we can use to
// check if the value was set
message PCredentials {
  optional string principal = 1;
  optional string tokenClassName = 2;
  optional bytes token = 3;
  optional string instanceId = 4;
}

message PKeyExtent {
  bytes table = 1;
  // optional to generate hasEndRow() and hasPrevEndRow() becuase
  // of no nulls in protobuf
  optional bytes endRow = 2;
  optional bytes prevEndRow = 3;
}

message PInputFile {
  // This is nullable in Thrift but I am not marking as optional as
  // I think it should always be set
  string metadataFileEntry = 1;
  int64 size = 2;
  int64 entries = 3;
  int64 timestamp = 4;
}

message PIteratorSetting {
  int32 priority = 1;
  string name = 2;
  string iteratorClass = 3;
  map<string, string> properties = 4;
}

message PIteratorConfig {
  repeated PIteratorSetting iterators = 1;
}

// We can't use the same values in the different enums if in the same
// package so add a prefix to the values
enum PCompactionKind {
  // SELECTOR was removed and used to be zero
  // However protobuf3 requires starting with 0 which is the default
  CK_UNKNOWN = 0;
  CK_SYSTEM = 1;
  CK_USER = 2;
}

enum PFateInstanceType {
  FI_UNKNOWN = 0;
  FI_META = 1;
  FI_USER = 2;
}

message PFateId {
  PFateInstanceType type = 1;
  string txUUIDStr = 2;
}

message PExternalCompactionJob {
  optional string externalCompactionId = 1;
  optional PKeyExtent extent = 2;
  repeated PInputFile files = 3;
  optional PIteratorConfig iteratorSettings = 4;
  optional string outputFile = 5;
  optional bool propagateDeletes = 6;
  optional PCompactionKind kind = 7;
  optional PFateId fateId = 8;
  map<string, string> overrides = 9;
}

message PNextCompactionJob {
  PExternalCompactionJob job = 1;
  int32 compactorCount = 2;
}

message CompactionJobRequest {
  PInfo pinfo = 1;
  PCredentials credentials = 2;
  string groupName = 3;
  string compactor = 4;
  string externalCompactionId = 5;
}
