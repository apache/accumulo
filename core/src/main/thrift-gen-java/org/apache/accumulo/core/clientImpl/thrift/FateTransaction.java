/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.clientImpl.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class FateTransaction implements org.apache.thrift.TBase<FateTransaction, FateTransaction._Fields>, java.io.Serializable, Cloneable, Comparable<FateTransaction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FateTransaction");

  private static final org.apache.thrift.protocol.TField TXID_FIELD_DESC = new org.apache.thrift.protocol.TField("txid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("tstatus", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("debug", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("hlocks", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField WLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("wlocks", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("top", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIMECREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("timecreated", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField STACK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("stackInfo", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FateTransactionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FateTransactionTupleSchemeFactory();

  public long txid; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tstatus; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String debug; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> hlocks; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> wlocks; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String top; // required
  public long timecreated; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String stackInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TXID((short)1, "txid"),
    TSTATUS((short)2, "tstatus"),
    DEBUG((short)3, "debug"),
    HLOCKS((short)4, "hlocks"),
    WLOCKS((short)5, "wlocks"),
    TOP((short)6, "top"),
    TIMECREATED((short)7, "timecreated"),
    STACK_INFO((short)8, "stackInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TXID
          return TXID;
        case 2: // TSTATUS
          return TSTATUS;
        case 3: // DEBUG
          return DEBUG;
        case 4: // HLOCKS
          return HLOCKS;
        case 5: // WLOCKS
          return WLOCKS;
        case 6: // TOP
          return TOP;
        case 7: // TIMECREATED
          return TIMECREATED;
        case 8: // STACK_INFO
          return STACK_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXID_ISSET_ID = 0;
  private static final int __TIMECREATED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TXID, new org.apache.thrift.meta_data.FieldMetaData("txid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TSTATUS, new org.apache.thrift.meta_data.FieldMetaData("tstatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBUG, new org.apache.thrift.meta_data.FieldMetaData("debug", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HLOCKS, new org.apache.thrift.meta_data.FieldMetaData("hlocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WLOCKS, new org.apache.thrift.meta_data.FieldMetaData("wlocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TOP, new org.apache.thrift.meta_data.FieldMetaData("top", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMECREATED, new org.apache.thrift.meta_data.FieldMetaData("timecreated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STACK_INFO, new org.apache.thrift.meta_data.FieldMetaData("stackInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FateTransaction.class, metaDataMap);
  }

  public FateTransaction() {
  }

  public FateTransaction(
    long txid,
    java.lang.String tstatus,
    java.lang.String debug,
    java.util.List<java.lang.String> hlocks,
    java.util.List<java.lang.String> wlocks,
    java.lang.String top,
    long timecreated,
    java.lang.String stackInfo)
  {
    this();
    this.txid = txid;
    setTxidIsSet(true);
    this.tstatus = tstatus;
    this.debug = debug;
    this.hlocks = hlocks;
    this.wlocks = wlocks;
    this.top = top;
    this.timecreated = timecreated;
    setTimecreatedIsSet(true);
    this.stackInfo = stackInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FateTransaction(FateTransaction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.txid = other.txid;
    if (other.isSetTstatus()) {
      this.tstatus = other.tstatus;
    }
    if (other.isSetDebug()) {
      this.debug = other.debug;
    }
    if (other.isSetHlocks()) {
      java.util.List<java.lang.String> __this__hlocks = new java.util.ArrayList<java.lang.String>(other.hlocks);
      this.hlocks = __this__hlocks;
    }
    if (other.isSetWlocks()) {
      java.util.List<java.lang.String> __this__wlocks = new java.util.ArrayList<java.lang.String>(other.wlocks);
      this.wlocks = __this__wlocks;
    }
    if (other.isSetTop()) {
      this.top = other.top;
    }
    this.timecreated = other.timecreated;
    if (other.isSetStackInfo()) {
      this.stackInfo = other.stackInfo;
    }
  }

  public FateTransaction deepCopy() {
    return new FateTransaction(this);
  }

  @Override
  public void clear() {
    setTxidIsSet(false);
    this.txid = 0;
    this.tstatus = null;
    this.debug = null;
    this.hlocks = null;
    this.wlocks = null;
    this.top = null;
    setTimecreatedIsSet(false);
    this.timecreated = 0;
    this.stackInfo = null;
  }

  public long getTxid() {
    return this.txid;
  }

  public FateTransaction setTxid(long txid) {
    this.txid = txid;
    setTxidIsSet(true);
    return this;
  }

  public void unsetTxid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXID_ISSET_ID);
  }

  /** Returns true if field txid is set (has been assigned a value) and false otherwise */
  public boolean isSetTxid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXID_ISSET_ID);
  }

  public void setTxidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTstatus() {
    return this.tstatus;
  }

  public FateTransaction setTstatus(@org.apache.thrift.annotation.Nullable java.lang.String tstatus) {
    this.tstatus = tstatus;
    return this;
  }

  public void unsetTstatus() {
    this.tstatus = null;
  }

  /** Returns true if field tstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTstatus() {
    return this.tstatus != null;
  }

  public void setTstatusIsSet(boolean value) {
    if (!value) {
      this.tstatus = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDebug() {
    return this.debug;
  }

  public FateTransaction setDebug(@org.apache.thrift.annotation.Nullable java.lang.String debug) {
    this.debug = debug;
    return this;
  }

  public void unsetDebug() {
    this.debug = null;
  }

  /** Returns true if field debug is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug() {
    return this.debug != null;
  }

  public void setDebugIsSet(boolean value) {
    if (!value) {
      this.debug = null;
    }
  }

  public int getHlocksSize() {
    return (this.hlocks == null) ? 0 : this.hlocks.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getHlocksIterator() {
    return (this.hlocks == null) ? null : this.hlocks.iterator();
  }

  public void addToHlocks(java.lang.String elem) {
    if (this.hlocks == null) {
      this.hlocks = new java.util.ArrayList<java.lang.String>();
    }
    this.hlocks.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getHlocks() {
    return this.hlocks;
  }

  public FateTransaction setHlocks(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> hlocks) {
    this.hlocks = hlocks;
    return this;
  }

  public void unsetHlocks() {
    this.hlocks = null;
  }

  /** Returns true if field hlocks is set (has been assigned a value) and false otherwise */
  public boolean isSetHlocks() {
    return this.hlocks != null;
  }

  public void setHlocksIsSet(boolean value) {
    if (!value) {
      this.hlocks = null;
    }
  }

  public int getWlocksSize() {
    return (this.wlocks == null) ? 0 : this.wlocks.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getWlocksIterator() {
    return (this.wlocks == null) ? null : this.wlocks.iterator();
  }

  public void addToWlocks(java.lang.String elem) {
    if (this.wlocks == null) {
      this.wlocks = new java.util.ArrayList<java.lang.String>();
    }
    this.wlocks.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getWlocks() {
    return this.wlocks;
  }

  public FateTransaction setWlocks(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> wlocks) {
    this.wlocks = wlocks;
    return this;
  }

  public void unsetWlocks() {
    this.wlocks = null;
  }

  /** Returns true if field wlocks is set (has been assigned a value) and false otherwise */
  public boolean isSetWlocks() {
    return this.wlocks != null;
  }

  public void setWlocksIsSet(boolean value) {
    if (!value) {
      this.wlocks = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTop() {
    return this.top;
  }

  public FateTransaction setTop(@org.apache.thrift.annotation.Nullable java.lang.String top) {
    this.top = top;
    return this;
  }

  public void unsetTop() {
    this.top = null;
  }

  /** Returns true if field top is set (has been assigned a value) and false otherwise */
  public boolean isSetTop() {
    return this.top != null;
  }

  public void setTopIsSet(boolean value) {
    if (!value) {
      this.top = null;
    }
  }

  public long getTimecreated() {
    return this.timecreated;
  }

  public FateTransaction setTimecreated(long timecreated) {
    this.timecreated = timecreated;
    setTimecreatedIsSet(true);
    return this;
  }

  public void unsetTimecreated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMECREATED_ISSET_ID);
  }

  /** Returns true if field timecreated is set (has been assigned a value) and false otherwise */
  public boolean isSetTimecreated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMECREATED_ISSET_ID);
  }

  public void setTimecreatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMECREATED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStackInfo() {
    return this.stackInfo;
  }

  public FateTransaction setStackInfo(@org.apache.thrift.annotation.Nullable java.lang.String stackInfo) {
    this.stackInfo = stackInfo;
    return this;
  }

  public void unsetStackInfo() {
    this.stackInfo = null;
  }

  /** Returns true if field stackInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetStackInfo() {
    return this.stackInfo != null;
  }

  public void setStackInfoIsSet(boolean value) {
    if (!value) {
      this.stackInfo = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TXID:
      if (value == null) {
        unsetTxid();
      } else {
        setTxid((java.lang.Long)value);
      }
      break;

    case TSTATUS:
      if (value == null) {
        unsetTstatus();
      } else {
        setTstatus((java.lang.String)value);
      }
      break;

    case DEBUG:
      if (value == null) {
        unsetDebug();
      } else {
        setDebug((java.lang.String)value);
      }
      break;

    case HLOCKS:
      if (value == null) {
        unsetHlocks();
      } else {
        setHlocks((java.util.List<java.lang.String>)value);
      }
      break;

    case WLOCKS:
      if (value == null) {
        unsetWlocks();
      } else {
        setWlocks((java.util.List<java.lang.String>)value);
      }
      break;

    case TOP:
      if (value == null) {
        unsetTop();
      } else {
        setTop((java.lang.String)value);
      }
      break;

    case TIMECREATED:
      if (value == null) {
        unsetTimecreated();
      } else {
        setTimecreated((java.lang.Long)value);
      }
      break;

    case STACK_INFO:
      if (value == null) {
        unsetStackInfo();
      } else {
        setStackInfo((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TXID:
      return getTxid();

    case TSTATUS:
      return getTstatus();

    case DEBUG:
      return getDebug();

    case HLOCKS:
      return getHlocks();

    case WLOCKS:
      return getWlocks();

    case TOP:
      return getTop();

    case TIMECREATED:
      return getTimecreated();

    case STACK_INFO:
      return getStackInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TXID:
      return isSetTxid();
    case TSTATUS:
      return isSetTstatus();
    case DEBUG:
      return isSetDebug();
    case HLOCKS:
      return isSetHlocks();
    case WLOCKS:
      return isSetWlocks();
    case TOP:
      return isSetTop();
    case TIMECREATED:
      return isSetTimecreated();
    case STACK_INFO:
      return isSetStackInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FateTransaction)
      return this.equals((FateTransaction)that);
    return false;
  }

  public boolean equals(FateTransaction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_txid = true;
    boolean that_present_txid = true;
    if (this_present_txid || that_present_txid) {
      if (!(this_present_txid && that_present_txid))
        return false;
      if (this.txid != that.txid)
        return false;
    }

    boolean this_present_tstatus = true && this.isSetTstatus();
    boolean that_present_tstatus = true && that.isSetTstatus();
    if (this_present_tstatus || that_present_tstatus) {
      if (!(this_present_tstatus && that_present_tstatus))
        return false;
      if (!this.tstatus.equals(that.tstatus))
        return false;
    }

    boolean this_present_debug = true && this.isSetDebug();
    boolean that_present_debug = true && that.isSetDebug();
    if (this_present_debug || that_present_debug) {
      if (!(this_present_debug && that_present_debug))
        return false;
      if (!this.debug.equals(that.debug))
        return false;
    }

    boolean this_present_hlocks = true && this.isSetHlocks();
    boolean that_present_hlocks = true && that.isSetHlocks();
    if (this_present_hlocks || that_present_hlocks) {
      if (!(this_present_hlocks && that_present_hlocks))
        return false;
      if (!this.hlocks.equals(that.hlocks))
        return false;
    }

    boolean this_present_wlocks = true && this.isSetWlocks();
    boolean that_present_wlocks = true && that.isSetWlocks();
    if (this_present_wlocks || that_present_wlocks) {
      if (!(this_present_wlocks && that_present_wlocks))
        return false;
      if (!this.wlocks.equals(that.wlocks))
        return false;
    }

    boolean this_present_top = true && this.isSetTop();
    boolean that_present_top = true && that.isSetTop();
    if (this_present_top || that_present_top) {
      if (!(this_present_top && that_present_top))
        return false;
      if (!this.top.equals(that.top))
        return false;
    }

    boolean this_present_timecreated = true;
    boolean that_present_timecreated = true;
    if (this_present_timecreated || that_present_timecreated) {
      if (!(this_present_timecreated && that_present_timecreated))
        return false;
      if (this.timecreated != that.timecreated)
        return false;
    }

    boolean this_present_stackInfo = true && this.isSetStackInfo();
    boolean that_present_stackInfo = true && that.isSetStackInfo();
    if (this_present_stackInfo || that_present_stackInfo) {
      if (!(this_present_stackInfo && that_present_stackInfo))
        return false;
      if (!this.stackInfo.equals(that.stackInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txid);

    hashCode = hashCode * 8191 + ((isSetTstatus()) ? 131071 : 524287);
    if (isSetTstatus())
      hashCode = hashCode * 8191 + tstatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetDebug()) ? 131071 : 524287);
    if (isSetDebug())
      hashCode = hashCode * 8191 + debug.hashCode();

    hashCode = hashCode * 8191 + ((isSetHlocks()) ? 131071 : 524287);
    if (isSetHlocks())
      hashCode = hashCode * 8191 + hlocks.hashCode();

    hashCode = hashCode * 8191 + ((isSetWlocks()) ? 131071 : 524287);
    if (isSetWlocks())
      hashCode = hashCode * 8191 + wlocks.hashCode();

    hashCode = hashCode * 8191 + ((isSetTop()) ? 131071 : 524287);
    if (isSetTop())
      hashCode = hashCode * 8191 + top.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timecreated);

    hashCode = hashCode * 8191 + ((isSetStackInfo()) ? 131071 : 524287);
    if (isSetStackInfo())
      hashCode = hashCode * 8191 + stackInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FateTransaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTxid()).compareTo(other.isSetTxid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txid, other.txid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTstatus()).compareTo(other.isSetTstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tstatus, other.tstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDebug()).compareTo(other.isSetDebug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug, other.debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHlocks()).compareTo(other.isSetHlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hlocks, other.hlocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWlocks()).compareTo(other.isSetWlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wlocks, other.wlocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTop()).compareTo(other.isSetTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.top, other.top);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimecreated()).compareTo(other.isSetTimecreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimecreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timecreated, other.timecreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStackInfo()).compareTo(other.isSetStackInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStackInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stackInfo, other.stackInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FateTransaction(");
    boolean first = true;

    sb.append("txid:");
    sb.append(this.txid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tstatus:");
    if (this.tstatus == null) {
      sb.append("null");
    } else {
      sb.append(this.tstatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("debug:");
    if (this.debug == null) {
      sb.append("null");
    } else {
      sb.append(this.debug);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hlocks:");
    if (this.hlocks == null) {
      sb.append("null");
    } else {
      sb.append(this.hlocks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wlocks:");
    if (this.wlocks == null) {
      sb.append("null");
    } else {
      sb.append(this.wlocks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("top:");
    if (this.top == null) {
      sb.append("null");
    } else {
      sb.append(this.top);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timecreated:");
    sb.append(this.timecreated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stackInfo:");
    if (this.stackInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.stackInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FateTransactionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FateTransactionStandardScheme getScheme() {
      return new FateTransactionStandardScheme();
    }
  }

  private static class FateTransactionStandardScheme extends org.apache.thrift.scheme.StandardScheme<FateTransaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FateTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TXID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txid = iprot.readI64();
              struct.setTxidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tstatus = iprot.readString();
              struct.setTstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debug = iprot.readString();
              struct.setDebugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.hlocks = new java.util.ArrayList<java.lang.String>(_list8.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.hlocks.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setHlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.wlocks = new java.util.ArrayList<java.lang.String>(_list11.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = iprot.readString();
                  struct.wlocks.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setWlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.top = iprot.readString();
              struct.setTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMECREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timecreated = iprot.readI64();
              struct.setTimecreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STACK_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stackInfo = iprot.readString();
              struct.setStackInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FateTransaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TXID_FIELD_DESC);
      oprot.writeI64(struct.txid);
      oprot.writeFieldEnd();
      if (struct.tstatus != null) {
        oprot.writeFieldBegin(TSTATUS_FIELD_DESC);
        oprot.writeString(struct.tstatus);
        oprot.writeFieldEnd();
      }
      if (struct.debug != null) {
        oprot.writeFieldBegin(DEBUG_FIELD_DESC);
        oprot.writeString(struct.debug);
        oprot.writeFieldEnd();
      }
      if (struct.hlocks != null) {
        oprot.writeFieldBegin(HLOCKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hlocks.size()));
          for (java.lang.String _iter14 : struct.hlocks)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.wlocks != null) {
        oprot.writeFieldBegin(WLOCKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.wlocks.size()));
          for (java.lang.String _iter15 : struct.wlocks)
          {
            oprot.writeString(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.top != null) {
        oprot.writeFieldBegin(TOP_FIELD_DESC);
        oprot.writeString(struct.top);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMECREATED_FIELD_DESC);
      oprot.writeI64(struct.timecreated);
      oprot.writeFieldEnd();
      if (struct.stackInfo != null) {
        oprot.writeFieldBegin(STACK_INFO_FIELD_DESC);
        oprot.writeString(struct.stackInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FateTransactionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FateTransactionTupleScheme getScheme() {
      return new FateTransactionTupleScheme();
    }
  }

  private static class FateTransactionTupleScheme extends org.apache.thrift.scheme.TupleScheme<FateTransaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FateTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTxid()) {
        optionals.set(0);
      }
      if (struct.isSetTstatus()) {
        optionals.set(1);
      }
      if (struct.isSetDebug()) {
        optionals.set(2);
      }
      if (struct.isSetHlocks()) {
        optionals.set(3);
      }
      if (struct.isSetWlocks()) {
        optionals.set(4);
      }
      if (struct.isSetTop()) {
        optionals.set(5);
      }
      if (struct.isSetTimecreated()) {
        optionals.set(6);
      }
      if (struct.isSetStackInfo()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTxid()) {
        oprot.writeI64(struct.txid);
      }
      if (struct.isSetTstatus()) {
        oprot.writeString(struct.tstatus);
      }
      if (struct.isSetDebug()) {
        oprot.writeString(struct.debug);
      }
      if (struct.isSetHlocks()) {
        {
          oprot.writeI32(struct.hlocks.size());
          for (java.lang.String _iter16 : struct.hlocks)
          {
            oprot.writeString(_iter16);
          }
        }
      }
      if (struct.isSetWlocks()) {
        {
          oprot.writeI32(struct.wlocks.size());
          for (java.lang.String _iter17 : struct.wlocks)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetTop()) {
        oprot.writeString(struct.top);
      }
      if (struct.isSetTimecreated()) {
        oprot.writeI64(struct.timecreated);
      }
      if (struct.isSetStackInfo()) {
        oprot.writeString(struct.stackInfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FateTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.txid = iprot.readI64();
        struct.setTxidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tstatus = iprot.readString();
        struct.setTstatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.debug = iprot.readString();
        struct.setDebugIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hlocks = new java.util.ArrayList<java.lang.String>(_list18.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.hlocks.add(_elem19);
          }
        }
        struct.setHlocksIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.wlocks = new java.util.ArrayList<java.lang.String>(_list21.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.wlocks.add(_elem22);
          }
        }
        struct.setWlocksIsSet(true);
      }
      if (incoming.get(5)) {
        struct.top = iprot.readString();
        struct.setTopIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timecreated = iprot.readI64();
        struct.setTimecreatedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stackInfo = iprot.readString();
        struct.setStackInfoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
  private static void unusedMethod() {}
}

