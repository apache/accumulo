/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.manager.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TTabletMergeability implements org.apache.thrift.TBase<TTabletMergeability, TTabletMergeability._Fields>, java.io.Serializable, Cloneable, Comparable<TTabletMergeability> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTabletMergeability");

  private static final org.apache.thrift.protocol.TField NEVER_FIELD_DESC = new org.apache.thrift.protocol.TField("never", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("delay", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTabletMergeabilityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTabletMergeabilityTupleSchemeFactory();

  public boolean never; // required
  public long delay; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NEVER((short)1, "never"),
    DELAY((short)2, "delay");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEVER
          return NEVER;
        case 2: // DELAY
          return DELAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEVER_ISSET_ID = 0;
  private static final int __DELAY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEVER, new org.apache.thrift.meta_data.FieldMetaData("never", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELAY, new org.apache.thrift.meta_data.FieldMetaData("delay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTabletMergeability.class, metaDataMap);
  }

  public TTabletMergeability() {
  }

  public TTabletMergeability(
    boolean never,
    long delay)
  {
    this();
    this.never = never;
    setNeverIsSet(true);
    this.delay = delay;
    setDelayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTabletMergeability(TTabletMergeability other) {
    __isset_bitfield = other.__isset_bitfield;
    this.never = other.never;
    this.delay = other.delay;
  }

  @Override
  public TTabletMergeability deepCopy() {
    return new TTabletMergeability(this);
  }

  @Override
  public void clear() {
    setNeverIsSet(false);
    this.never = false;
    setDelayIsSet(false);
    this.delay = 0;
  }

  public boolean isNever() {
    return this.never;
  }

  public TTabletMergeability setNever(boolean never) {
    this.never = never;
    setNeverIsSet(true);
    return this;
  }

  public void unsetNever() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEVER_ISSET_ID);
  }

  /** Returns true if field never is set (has been assigned a value) and false otherwise */
  public boolean isSetNever() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEVER_ISSET_ID);
  }

  public void setNeverIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEVER_ISSET_ID, value);
  }

  public long getDelay() {
    return this.delay;
  }

  public TTabletMergeability setDelay(long delay) {
    this.delay = delay;
    setDelayIsSet(true);
    return this;
  }

  public void unsetDelay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELAY_ISSET_ID);
  }

  /** Returns true if field delay is set (has been assigned a value) and false otherwise */
  public boolean isSetDelay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELAY_ISSET_ID);
  }

  public void setDelayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELAY_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NEVER:
      if (value == null) {
        unsetNever();
      } else {
        setNever((java.lang.Boolean)value);
      }
      break;

    case DELAY:
      if (value == null) {
        unsetDelay();
      } else {
        setDelay((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NEVER:
      return isNever();

    case DELAY:
      return getDelay();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NEVER:
      return isSetNever();
    case DELAY:
      return isSetDelay();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTabletMergeability)
      return this.equals((TTabletMergeability)that);
    return false;
  }

  public boolean equals(TTabletMergeability that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_never = true;
    boolean that_present_never = true;
    if (this_present_never || that_present_never) {
      if (!(this_present_never && that_present_never))
        return false;
      if (this.never != that.never)
        return false;
    }

    boolean this_present_delay = true;
    boolean that_present_delay = true;
    if (this_present_delay || that_present_delay) {
      if (!(this_present_delay && that_present_delay))
        return false;
      if (this.delay != that.delay)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((never) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(delay);

    return hashCode;
  }

  @Override
  public int compareTo(TTabletMergeability other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNever(), other.isSetNever());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNever()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.never, other.never);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDelay(), other.isSetDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delay, other.delay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTabletMergeability(");
    boolean first = true;

    sb.append("never:");
    sb.append(this.never);
    first = false;
    if (!first) sb.append(", ");
    sb.append("delay:");
    sb.append(this.delay);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletMergeabilityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletMergeabilityStandardScheme getScheme() {
      return new TTabletMergeabilityStandardScheme();
    }
  }

  private static class TTabletMergeabilityStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTabletMergeability> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTabletMergeability struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NEVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.never = iprot.readBool();
              struct.setNeverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.delay = iprot.readI64();
              struct.setDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTabletMergeability struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NEVER_FIELD_DESC);
      oprot.writeBool(struct.never);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELAY_FIELD_DESC);
      oprot.writeI64(struct.delay);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletMergeabilityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletMergeabilityTupleScheme getScheme() {
      return new TTabletMergeabilityTupleScheme();
    }
  }

  private static class TTabletMergeabilityTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTabletMergeability> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTabletMergeability struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNever()) {
        optionals.set(0);
      }
      if (struct.isSetDelay()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNever()) {
        oprot.writeBool(struct.never);
      }
      if (struct.isSetDelay()) {
        oprot.writeI64(struct.delay);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTabletMergeability struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.never = iprot.readBool();
        struct.setNeverIsSet(true);
      }
      if (incoming.get(1)) {
        struct.delay = iprot.readI64();
        struct.setDelayIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
  private static void unusedMethod() {}
}

