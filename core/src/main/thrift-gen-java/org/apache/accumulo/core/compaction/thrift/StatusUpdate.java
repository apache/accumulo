/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.compaction.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class StatusUpdate implements org.apache.thrift.TBase<StatusUpdate, StatusUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<StatusUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusUpdate");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BYTES_TO_BE_COMPACTED_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesToBeCompacted", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BYTES_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesRead", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BYTES_WRITTEN_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesWritten", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StatusUpdateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StatusUpdateTupleSchemeFactory();

  /**
   * 
   * @see TCompactionState
   */
  public @org.apache.thrift.annotation.Nullable TCompactionState state; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String message; // required
  public long bytesToBeCompacted; // required
  public long bytesRead; // required
  public long bytesWritten; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TCompactionState
     */
    STATE((short)1, "state"),
    MESSAGE((short)2, "message"),
    BYTES_TO_BE_COMPACTED((short)3, "bytesToBeCompacted"),
    BYTES_READ((short)4, "bytesRead"),
    BYTES_WRITTEN((short)5, "bytesWritten");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // BYTES_TO_BE_COMPACTED
          return BYTES_TO_BE_COMPACTED;
        case 4: // BYTES_READ
          return BYTES_READ;
        case 5: // BYTES_WRITTEN
          return BYTES_WRITTEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BYTESTOBECOMPACTED_ISSET_ID = 0;
  private static final int __BYTESREAD_ISSET_ID = 1;
  private static final int __BYTESWRITTEN_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCompactionState.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BYTES_TO_BE_COMPACTED, new org.apache.thrift.meta_data.FieldMetaData("bytesToBeCompacted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BYTES_READ, new org.apache.thrift.meta_data.FieldMetaData("bytesRead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BYTES_WRITTEN, new org.apache.thrift.meta_data.FieldMetaData("bytesWritten", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusUpdate.class, metaDataMap);
  }

  public StatusUpdate() {
  }

  public StatusUpdate(
    TCompactionState state,
    java.lang.String message,
    long bytesToBeCompacted,
    long bytesRead,
    long bytesWritten)
  {
    this();
    this.state = state;
    this.message = message;
    this.bytesToBeCompacted = bytesToBeCompacted;
    setBytesToBeCompactedIsSet(true);
    this.bytesRead = bytesRead;
    setBytesReadIsSet(true);
    this.bytesWritten = bytesWritten;
    setBytesWrittenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusUpdate(StatusUpdate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.bytesToBeCompacted = other.bytesToBeCompacted;
    this.bytesRead = other.bytesRead;
    this.bytesWritten = other.bytesWritten;
  }

  public StatusUpdate deepCopy() {
    return new StatusUpdate(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.message = null;
    setBytesToBeCompactedIsSet(false);
    this.bytesToBeCompacted = 0;
    setBytesReadIsSet(false);
    this.bytesRead = 0;
    setBytesWrittenIsSet(false);
    this.bytesWritten = 0;
  }

  /**
   * 
   * @see TCompactionState
   */
  @org.apache.thrift.annotation.Nullable
  public TCompactionState getState() {
    return this.state;
  }

  /**
   * 
   * @see TCompactionState
   */
  public StatusUpdate setState(@org.apache.thrift.annotation.Nullable TCompactionState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMessage() {
    return this.message;
  }

  public StatusUpdate setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public long getBytesToBeCompacted() {
    return this.bytesToBeCompacted;
  }

  public StatusUpdate setBytesToBeCompacted(long bytesToBeCompacted) {
    this.bytesToBeCompacted = bytesToBeCompacted;
    setBytesToBeCompactedIsSet(true);
    return this;
  }

  public void unsetBytesToBeCompacted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESTOBECOMPACTED_ISSET_ID);
  }

  /** Returns true if field bytesToBeCompacted is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesToBeCompacted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESTOBECOMPACTED_ISSET_ID);
  }

  public void setBytesToBeCompactedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESTOBECOMPACTED_ISSET_ID, value);
  }

  public long getBytesRead() {
    return this.bytesRead;
  }

  public StatusUpdate setBytesRead(long bytesRead) {
    this.bytesRead = bytesRead;
    setBytesReadIsSet(true);
    return this;
  }

  public void unsetBytesRead() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESREAD_ISSET_ID);
  }

  /** Returns true if field bytesRead is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesRead() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESREAD_ISSET_ID);
  }

  public void setBytesReadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESREAD_ISSET_ID, value);
  }

  public long getBytesWritten() {
    return this.bytesWritten;
  }

  public StatusUpdate setBytesWritten(long bytesWritten) {
    this.bytesWritten = bytesWritten;
    setBytesWrittenIsSet(true);
    return this;
  }

  public void unsetBytesWritten() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTESWRITTEN_ISSET_ID);
  }

  /** Returns true if field bytesWritten is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesWritten() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTESWRITTEN_ISSET_ID);
  }

  public void setBytesWrittenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTESWRITTEN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((TCompactionState)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((java.lang.String)value);
      }
      break;

    case BYTES_TO_BE_COMPACTED:
      if (value == null) {
        unsetBytesToBeCompacted();
      } else {
        setBytesToBeCompacted((java.lang.Long)value);
      }
      break;

    case BYTES_READ:
      if (value == null) {
        unsetBytesRead();
      } else {
        setBytesRead((java.lang.Long)value);
      }
      break;

    case BYTES_WRITTEN:
      if (value == null) {
        unsetBytesWritten();
      } else {
        setBytesWritten((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case MESSAGE:
      return getMessage();

    case BYTES_TO_BE_COMPACTED:
      return getBytesToBeCompacted();

    case BYTES_READ:
      return getBytesRead();

    case BYTES_WRITTEN:
      return getBytesWritten();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case MESSAGE:
      return isSetMessage();
    case BYTES_TO_BE_COMPACTED:
      return isSetBytesToBeCompacted();
    case BYTES_READ:
      return isSetBytesRead();
    case BYTES_WRITTEN:
      return isSetBytesWritten();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof StatusUpdate)
      return this.equals((StatusUpdate)that);
    return false;
  }

  public boolean equals(StatusUpdate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_bytesToBeCompacted = true;
    boolean that_present_bytesToBeCompacted = true;
    if (this_present_bytesToBeCompacted || that_present_bytesToBeCompacted) {
      if (!(this_present_bytesToBeCompacted && that_present_bytesToBeCompacted))
        return false;
      if (this.bytesToBeCompacted != that.bytesToBeCompacted)
        return false;
    }

    boolean this_present_bytesRead = true;
    boolean that_present_bytesRead = true;
    if (this_present_bytesRead || that_present_bytesRead) {
      if (!(this_present_bytesRead && that_present_bytesRead))
        return false;
      if (this.bytesRead != that.bytesRead)
        return false;
    }

    boolean this_present_bytesWritten = true;
    boolean that_present_bytesWritten = true;
    if (this_present_bytesWritten || that_present_bytesWritten) {
      if (!(this_present_bytesWritten && that_present_bytesWritten))
        return false;
      if (this.bytesWritten != that.bytesWritten)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.getValue();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesToBeCompacted);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesRead);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bytesWritten);

    return hashCode;
  }

  @Override
  public int compareTo(StatusUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessage(), other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBytesToBeCompacted(), other.isSetBytesToBeCompacted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesToBeCompacted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesToBeCompacted, other.bytesToBeCompacted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBytesRead(), other.isSetBytesRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesRead, other.bytesRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBytesWritten(), other.isSetBytesWritten());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesWritten()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesWritten, other.bytesWritten);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StatusUpdate(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesToBeCompacted:");
    sb.append(this.bytesToBeCompacted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesRead:");
    sb.append(this.bytesRead);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesWritten:");
    sb.append(this.bytesWritten);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusUpdateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StatusUpdateStandardScheme getScheme() {
      return new StatusUpdateStandardScheme();
    }
  }

  private static class StatusUpdateStandardScheme extends org.apache.thrift.scheme.StandardScheme<StatusUpdate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = org.apache.accumulo.core.compaction.thrift.TCompactionState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BYTES_TO_BE_COMPACTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bytesToBeCompacted = iprot.readI64();
              struct.setBytesToBeCompactedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BYTES_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bytesRead = iprot.readI64();
              struct.setBytesReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BYTES_WRITTEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bytesWritten = iprot.readI64();
              struct.setBytesWrittenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BYTES_TO_BE_COMPACTED_FIELD_DESC);
      oprot.writeI64(struct.bytesToBeCompacted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTES_READ_FIELD_DESC);
      oprot.writeI64(struct.bytesRead);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTES_WRITTEN_FIELD_DESC);
      oprot.writeI64(struct.bytesWritten);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusUpdateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StatusUpdateTupleScheme getScheme() {
      return new StatusUpdateTupleScheme();
    }
  }

  private static class StatusUpdateTupleScheme extends org.apache.thrift.scheme.TupleScheme<StatusUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetBytesToBeCompacted()) {
        optionals.set(2);
      }
      if (struct.isSetBytesRead()) {
        optionals.set(3);
      }
      if (struct.isSetBytesWritten()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetBytesToBeCompacted()) {
        oprot.writeI64(struct.bytesToBeCompacted);
      }
      if (struct.isSetBytesRead()) {
        oprot.writeI64(struct.bytesRead);
      }
      if (struct.isSetBytesWritten()) {
        oprot.writeI64(struct.bytesWritten);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.state = org.apache.accumulo.core.compaction.thrift.TCompactionState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bytesToBeCompacted = iprot.readI64();
        struct.setBytesToBeCompactedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bytesRead = iprot.readI64();
        struct.setBytesReadIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bytesWritten = iprot.readI64();
        struct.setBytesWrittenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
  private static void unusedMethod() {}
}

