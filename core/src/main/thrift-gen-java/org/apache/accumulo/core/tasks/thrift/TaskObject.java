/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.tasks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TaskObject implements org.apache.thrift.TBase<TaskObject, TaskObject._Fields>, java.io.Serializable, Cloneable, Comparable<TaskObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskObject");

  private static final org.apache.thrift.protocol.TField TASK_MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("taskManager", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OBJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("objectType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CBOR_ENCODED_OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("cborEncodedObject", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TaskObjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TaskObjectTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String taskManager; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String taskID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String objectType; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer cborEncodedObject; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_MANAGER((short)1, "taskManager"),
    TASK_ID((short)2, "taskID"),
    OBJECT_TYPE((short)3, "objectType"),
    CBOR_ENCODED_OBJECT((short)4, "cborEncodedObject");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_MANAGER
          return TASK_MANAGER;
        case 2: // TASK_ID
          return TASK_ID;
        case 3: // OBJECT_TYPE
          return OBJECT_TYPE;
        case 4: // CBOR_ENCODED_OBJECT
          return CBOR_ENCODED_OBJECT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_MANAGER, new org.apache.thrift.meta_data.FieldMetaData("taskManager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("objectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CBOR_ENCODED_OBJECT, new org.apache.thrift.meta_data.FieldMetaData("cborEncodedObject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskObject.class, metaDataMap);
  }

  public TaskObject() {
  }

  public TaskObject(
    java.lang.String taskManager,
    java.lang.String taskID,
    java.lang.String objectType,
    java.nio.ByteBuffer cborEncodedObject)
  {
    this();
    this.taskManager = taskManager;
    this.taskID = taskID;
    this.objectType = objectType;
    this.cborEncodedObject = org.apache.thrift.TBaseHelper.copyBinary(cborEncodedObject);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskObject(TaskObject other) {
    if (other.isSetTaskManager()) {
      this.taskManager = other.taskManager;
    }
    if (other.isSetTaskID()) {
      this.taskID = other.taskID;
    }
    if (other.isSetObjectType()) {
      this.objectType = other.objectType;
    }
    if (other.isSetCborEncodedObject()) {
      this.cborEncodedObject = org.apache.thrift.TBaseHelper.copyBinary(other.cborEncodedObject);
    }
  }

  @Override
  public TaskObject deepCopy() {
    return new TaskObject(this);
  }

  @Override
  public void clear() {
    this.taskManager = null;
    this.taskID = null;
    this.objectType = null;
    this.cborEncodedObject = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTaskManager() {
    return this.taskManager;
  }

  public TaskObject setTaskManager(@org.apache.thrift.annotation.Nullable java.lang.String taskManager) {
    this.taskManager = taskManager;
    return this;
  }

  public void unsetTaskManager() {
    this.taskManager = null;
  }

  /** Returns true if field taskManager is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskManager() {
    return this.taskManager != null;
  }

  public void setTaskManagerIsSet(boolean value) {
    if (!value) {
      this.taskManager = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTaskID() {
    return this.taskID;
  }

  public TaskObject setTaskID(@org.apache.thrift.annotation.Nullable java.lang.String taskID) {
    this.taskID = taskID;
    return this;
  }

  public void unsetTaskID() {
    this.taskID = null;
  }

  /** Returns true if field taskID is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskID() {
    return this.taskID != null;
  }

  public void setTaskIDIsSet(boolean value) {
    if (!value) {
      this.taskID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getObjectType() {
    return this.objectType;
  }

  public TaskObject setObjectType(@org.apache.thrift.annotation.Nullable java.lang.String objectType) {
    this.objectType = objectType;
    return this;
  }

  public void unsetObjectType() {
    this.objectType = null;
  }

  /** Returns true if field objectType is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectType() {
    return this.objectType != null;
  }

  public void setObjectTypeIsSet(boolean value) {
    if (!value) {
      this.objectType = null;
    }
  }

  public byte[] getCborEncodedObject() {
    setCborEncodedObject(org.apache.thrift.TBaseHelper.rightSize(cborEncodedObject));
    return cborEncodedObject == null ? null : cborEncodedObject.array();
  }

  public java.nio.ByteBuffer bufferForCborEncodedObject() {
    return org.apache.thrift.TBaseHelper.copyBinary(cborEncodedObject);
  }

  public TaskObject setCborEncodedObject(byte[] cborEncodedObject) {
    this.cborEncodedObject = cborEncodedObject == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(cborEncodedObject.clone());
    return this;
  }

  public TaskObject setCborEncodedObject(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer cborEncodedObject) {
    this.cborEncodedObject = org.apache.thrift.TBaseHelper.copyBinary(cborEncodedObject);
    return this;
  }

  public void unsetCborEncodedObject() {
    this.cborEncodedObject = null;
  }

  /** Returns true if field cborEncodedObject is set (has been assigned a value) and false otherwise */
  public boolean isSetCborEncodedObject() {
    return this.cborEncodedObject != null;
  }

  public void setCborEncodedObjectIsSet(boolean value) {
    if (!value) {
      this.cborEncodedObject = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TASK_MANAGER:
      if (value == null) {
        unsetTaskManager();
      } else {
        setTaskManager((java.lang.String)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskID();
      } else {
        setTaskID((java.lang.String)value);
      }
      break;

    case OBJECT_TYPE:
      if (value == null) {
        unsetObjectType();
      } else {
        setObjectType((java.lang.String)value);
      }
      break;

    case CBOR_ENCODED_OBJECT:
      if (value == null) {
        unsetCborEncodedObject();
      } else {
        if (value instanceof byte[]) {
          setCborEncodedObject((byte[])value);
        } else {
          setCborEncodedObject((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_MANAGER:
      return getTaskManager();

    case TASK_ID:
      return getTaskID();

    case OBJECT_TYPE:
      return getObjectType();

    case CBOR_ENCODED_OBJECT:
      return getCborEncodedObject();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_MANAGER:
      return isSetTaskManager();
    case TASK_ID:
      return isSetTaskID();
    case OBJECT_TYPE:
      return isSetObjectType();
    case CBOR_ENCODED_OBJECT:
      return isSetCborEncodedObject();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TaskObject)
      return this.equals((TaskObject)that);
    return false;
  }

  public boolean equals(TaskObject that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskManager = true && this.isSetTaskManager();
    boolean that_present_taskManager = true && that.isSetTaskManager();
    if (this_present_taskManager || that_present_taskManager) {
      if (!(this_present_taskManager && that_present_taskManager))
        return false;
      if (!this.taskManager.equals(that.taskManager))
        return false;
    }

    boolean this_present_taskID = true && this.isSetTaskID();
    boolean that_present_taskID = true && that.isSetTaskID();
    if (this_present_taskID || that_present_taskID) {
      if (!(this_present_taskID && that_present_taskID))
        return false;
      if (!this.taskID.equals(that.taskID))
        return false;
    }

    boolean this_present_objectType = true && this.isSetObjectType();
    boolean that_present_objectType = true && that.isSetObjectType();
    if (this_present_objectType || that_present_objectType) {
      if (!(this_present_objectType && that_present_objectType))
        return false;
      if (!this.objectType.equals(that.objectType))
        return false;
    }

    boolean this_present_cborEncodedObject = true && this.isSetCborEncodedObject();
    boolean that_present_cborEncodedObject = true && that.isSetCborEncodedObject();
    if (this_present_cborEncodedObject || that_present_cborEncodedObject) {
      if (!(this_present_cborEncodedObject && that_present_cborEncodedObject))
        return false;
      if (!this.cborEncodedObject.equals(that.cborEncodedObject))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTaskManager()) ? 131071 : 524287);
    if (isSetTaskManager())
      hashCode = hashCode * 8191 + taskManager.hashCode();

    hashCode = hashCode * 8191 + ((isSetTaskID()) ? 131071 : 524287);
    if (isSetTaskID())
      hashCode = hashCode * 8191 + taskID.hashCode();

    hashCode = hashCode * 8191 + ((isSetObjectType()) ? 131071 : 524287);
    if (isSetObjectType())
      hashCode = hashCode * 8191 + objectType.hashCode();

    hashCode = hashCode * 8191 + ((isSetCborEncodedObject()) ? 131071 : 524287);
    if (isSetCborEncodedObject())
      hashCode = hashCode * 8191 + cborEncodedObject.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TaskObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTaskManager(), other.isSetTaskManager());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskManager()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskManager, other.taskManager);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTaskID(), other.isSetTaskID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskID, other.taskID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetObjectType(), other.isSetObjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectType, other.objectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCborEncodedObject(), other.isSetCborEncodedObject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCborEncodedObject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cborEncodedObject, other.cborEncodedObject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TaskObject(");
    boolean first = true;

    sb.append("taskManager:");
    if (this.taskManager == null) {
      sb.append("null");
    } else {
      sb.append(this.taskManager);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskID:");
    if (this.taskID == null) {
      sb.append("null");
    } else {
      sb.append(this.taskID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("objectType:");
    if (this.objectType == null) {
      sb.append("null");
    } else {
      sb.append(this.objectType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cborEncodedObject:");
    if (this.cborEncodedObject == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.cborEncodedObject, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TaskObjectStandardScheme getScheme() {
      return new TaskObjectStandardScheme();
    }
  }

  private static class TaskObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<TaskObject> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_MANAGER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskManager = iprot.readString();
              struct.setTaskManagerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskID = iprot.readString();
              struct.setTaskIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OBJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objectType = iprot.readString();
              struct.setObjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CBOR_ENCODED_OBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cborEncodedObject = iprot.readBinary();
              struct.setCborEncodedObjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskManager != null) {
        oprot.writeFieldBegin(TASK_MANAGER_FIELD_DESC);
        oprot.writeString(struct.taskManager);
        oprot.writeFieldEnd();
      }
      if (struct.taskID != null) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeString(struct.taskID);
        oprot.writeFieldEnd();
      }
      if (struct.objectType != null) {
        oprot.writeFieldBegin(OBJECT_TYPE_FIELD_DESC);
        oprot.writeString(struct.objectType);
        oprot.writeFieldEnd();
      }
      if (struct.cborEncodedObject != null) {
        oprot.writeFieldBegin(CBOR_ENCODED_OBJECT_FIELD_DESC);
        oprot.writeBinary(struct.cborEncodedObject);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TaskObjectTupleScheme getScheme() {
      return new TaskObjectTupleScheme();
    }
  }

  private static class TaskObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<TaskObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTaskManager()) {
        optionals.set(0);
      }
      if (struct.isSetTaskID()) {
        optionals.set(1);
      }
      if (struct.isSetObjectType()) {
        optionals.set(2);
      }
      if (struct.isSetCborEncodedObject()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTaskManager()) {
        oprot.writeString(struct.taskManager);
      }
      if (struct.isSetTaskID()) {
        oprot.writeString(struct.taskID);
      }
      if (struct.isSetObjectType()) {
        oprot.writeString(struct.objectType);
      }
      if (struct.isSetCborEncodedObject()) {
        oprot.writeBinary(struct.cborEncodedObject);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.taskManager = iprot.readString();
        struct.setTaskManagerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskID = iprot.readString();
        struct.setTaskIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.objectType = iprot.readString();
        struct.setObjectTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cborEncodedObject = iprot.readBinary();
        struct.setCborEncodedObjectIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
  private static void unusedMethod() {}
}

