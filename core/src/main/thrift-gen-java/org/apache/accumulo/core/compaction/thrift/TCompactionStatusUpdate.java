/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.compaction.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TCompactionStatusUpdate implements org.apache.thrift.TBase<TCompactionStatusUpdate, TCompactionStatusUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<TCompactionStatusUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCompactionStatusUpdate");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRIES_TO_BE_COMPACTED_FIELD_DESC = new org.apache.thrift.protocol.TField("entriesToBeCompacted", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ENTRIES_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("entriesRead", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ENTRIES_WRITTEN_FIELD_DESC = new org.apache.thrift.protocol.TField("entriesWritten", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCompactionStatusUpdateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCompactionStatusUpdateTupleSchemeFactory();

  /**
   * 
   * @see TCompactionState
   */
  public @org.apache.thrift.annotation.Nullable TCompactionState state; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String message; // required
  public long entriesToBeCompacted; // required
  public long entriesRead; // required
  public long entriesWritten; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TCompactionState
     */
    STATE((short)1, "state"),
    MESSAGE((short)2, "message"),
    ENTRIES_TO_BE_COMPACTED((short)3, "entriesToBeCompacted"),
    ENTRIES_READ((short)4, "entriesRead"),
    ENTRIES_WRITTEN((short)5, "entriesWritten");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // ENTRIES_TO_BE_COMPACTED
          return ENTRIES_TO_BE_COMPACTED;
        case 4: // ENTRIES_READ
          return ENTRIES_READ;
        case 5: // ENTRIES_WRITTEN
          return ENTRIES_WRITTEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENTRIESTOBECOMPACTED_ISSET_ID = 0;
  private static final int __ENTRIESREAD_ISSET_ID = 1;
  private static final int __ENTRIESWRITTEN_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCompactionState.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRIES_TO_BE_COMPACTED, new org.apache.thrift.meta_data.FieldMetaData("entriesToBeCompacted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENTRIES_READ, new org.apache.thrift.meta_data.FieldMetaData("entriesRead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENTRIES_WRITTEN, new org.apache.thrift.meta_data.FieldMetaData("entriesWritten", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCompactionStatusUpdate.class, metaDataMap);
  }

  public TCompactionStatusUpdate() {
  }

  public TCompactionStatusUpdate(
    TCompactionState state,
    java.lang.String message,
    long entriesToBeCompacted,
    long entriesRead,
    long entriesWritten)
  {
    this();
    this.state = state;
    this.message = message;
    this.entriesToBeCompacted = entriesToBeCompacted;
    setEntriesToBeCompactedIsSet(true);
    this.entriesRead = entriesRead;
    setEntriesReadIsSet(true);
    this.entriesWritten = entriesWritten;
    setEntriesWrittenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCompactionStatusUpdate(TCompactionStatusUpdate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.entriesToBeCompacted = other.entriesToBeCompacted;
    this.entriesRead = other.entriesRead;
    this.entriesWritten = other.entriesWritten;
  }

  @Override
  public TCompactionStatusUpdate deepCopy() {
    return new TCompactionStatusUpdate(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.message = null;
    setEntriesToBeCompactedIsSet(false);
    this.entriesToBeCompacted = 0;
    setEntriesReadIsSet(false);
    this.entriesRead = 0;
    setEntriesWrittenIsSet(false);
    this.entriesWritten = 0;
  }

  /**
   * 
   * @see TCompactionState
   */
  @org.apache.thrift.annotation.Nullable
  public TCompactionState getState() {
    return this.state;
  }

  /**
   * 
   * @see TCompactionState
   */
  public TCompactionStatusUpdate setState(@org.apache.thrift.annotation.Nullable TCompactionState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMessage() {
    return this.message;
  }

  public TCompactionStatusUpdate setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public long getEntriesToBeCompacted() {
    return this.entriesToBeCompacted;
  }

  public TCompactionStatusUpdate setEntriesToBeCompacted(long entriesToBeCompacted) {
    this.entriesToBeCompacted = entriesToBeCompacted;
    setEntriesToBeCompactedIsSet(true);
    return this;
  }

  public void unsetEntriesToBeCompacted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENTRIESTOBECOMPACTED_ISSET_ID);
  }

  /** Returns true if field entriesToBeCompacted is set (has been assigned a value) and false otherwise */
  public boolean isSetEntriesToBeCompacted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENTRIESTOBECOMPACTED_ISSET_ID);
  }

  public void setEntriesToBeCompactedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENTRIESTOBECOMPACTED_ISSET_ID, value);
  }

  public long getEntriesRead() {
    return this.entriesRead;
  }

  public TCompactionStatusUpdate setEntriesRead(long entriesRead) {
    this.entriesRead = entriesRead;
    setEntriesReadIsSet(true);
    return this;
  }

  public void unsetEntriesRead() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENTRIESREAD_ISSET_ID);
  }

  /** Returns true if field entriesRead is set (has been assigned a value) and false otherwise */
  public boolean isSetEntriesRead() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENTRIESREAD_ISSET_ID);
  }

  public void setEntriesReadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENTRIESREAD_ISSET_ID, value);
  }

  public long getEntriesWritten() {
    return this.entriesWritten;
  }

  public TCompactionStatusUpdate setEntriesWritten(long entriesWritten) {
    this.entriesWritten = entriesWritten;
    setEntriesWrittenIsSet(true);
    return this;
  }

  public void unsetEntriesWritten() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENTRIESWRITTEN_ISSET_ID);
  }

  /** Returns true if field entriesWritten is set (has been assigned a value) and false otherwise */
  public boolean isSetEntriesWritten() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENTRIESWRITTEN_ISSET_ID);
  }

  public void setEntriesWrittenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENTRIESWRITTEN_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((TCompactionState)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((java.lang.String)value);
      }
      break;

    case ENTRIES_TO_BE_COMPACTED:
      if (value == null) {
        unsetEntriesToBeCompacted();
      } else {
        setEntriesToBeCompacted((java.lang.Long)value);
      }
      break;

    case ENTRIES_READ:
      if (value == null) {
        unsetEntriesRead();
      } else {
        setEntriesRead((java.lang.Long)value);
      }
      break;

    case ENTRIES_WRITTEN:
      if (value == null) {
        unsetEntriesWritten();
      } else {
        setEntriesWritten((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case MESSAGE:
      return getMessage();

    case ENTRIES_TO_BE_COMPACTED:
      return getEntriesToBeCompacted();

    case ENTRIES_READ:
      return getEntriesRead();

    case ENTRIES_WRITTEN:
      return getEntriesWritten();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case MESSAGE:
      return isSetMessage();
    case ENTRIES_TO_BE_COMPACTED:
      return isSetEntriesToBeCompacted();
    case ENTRIES_READ:
      return isSetEntriesRead();
    case ENTRIES_WRITTEN:
      return isSetEntriesWritten();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TCompactionStatusUpdate)
      return this.equals((TCompactionStatusUpdate)that);
    return false;
  }

  public boolean equals(TCompactionStatusUpdate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_entriesToBeCompacted = true;
    boolean that_present_entriesToBeCompacted = true;
    if (this_present_entriesToBeCompacted || that_present_entriesToBeCompacted) {
      if (!(this_present_entriesToBeCompacted && that_present_entriesToBeCompacted))
        return false;
      if (this.entriesToBeCompacted != that.entriesToBeCompacted)
        return false;
    }

    boolean this_present_entriesRead = true;
    boolean that_present_entriesRead = true;
    if (this_present_entriesRead || that_present_entriesRead) {
      if (!(this_present_entriesRead && that_present_entriesRead))
        return false;
      if (this.entriesRead != that.entriesRead)
        return false;
    }

    boolean this_present_entriesWritten = true;
    boolean that_present_entriesWritten = true;
    if (this_present_entriesWritten || that_present_entriesWritten) {
      if (!(this_present_entriesWritten && that_present_entriesWritten))
        return false;
      if (this.entriesWritten != that.entriesWritten)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.getValue();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(entriesToBeCompacted);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(entriesRead);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(entriesWritten);

    return hashCode;
  }

  @Override
  public int compareTo(TCompactionStatusUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessage(), other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEntriesToBeCompacted(), other.isSetEntriesToBeCompacted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntriesToBeCompacted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entriesToBeCompacted, other.entriesToBeCompacted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEntriesRead(), other.isSetEntriesRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntriesRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entriesRead, other.entriesRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEntriesWritten(), other.isSetEntriesWritten());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntriesWritten()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entriesWritten, other.entriesWritten);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCompactionStatusUpdate(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entriesToBeCompacted:");
    sb.append(this.entriesToBeCompacted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entriesRead:");
    sb.append(this.entriesRead);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entriesWritten:");
    sb.append(this.entriesWritten);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCompactionStatusUpdateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCompactionStatusUpdateStandardScheme getScheme() {
      return new TCompactionStatusUpdateStandardScheme();
    }
  }

  private static class TCompactionStatusUpdateStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCompactionStatusUpdate> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TCompactionStatusUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = org.apache.accumulo.core.compaction.thrift.TCompactionState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRIES_TO_BE_COMPACTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entriesToBeCompacted = iprot.readI64();
              struct.setEntriesToBeCompactedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTRIES_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entriesRead = iprot.readI64();
              struct.setEntriesReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENTRIES_WRITTEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entriesWritten = iprot.readI64();
              struct.setEntriesWrittenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TCompactionStatusUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENTRIES_TO_BE_COMPACTED_FIELD_DESC);
      oprot.writeI64(struct.entriesToBeCompacted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTRIES_READ_FIELD_DESC);
      oprot.writeI64(struct.entriesRead);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTRIES_WRITTEN_FIELD_DESC);
      oprot.writeI64(struct.entriesWritten);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCompactionStatusUpdateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCompactionStatusUpdateTupleScheme getScheme() {
      return new TCompactionStatusUpdateTupleScheme();
    }
  }

  private static class TCompactionStatusUpdateTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCompactionStatusUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCompactionStatusUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetEntriesToBeCompacted()) {
        optionals.set(2);
      }
      if (struct.isSetEntriesRead()) {
        optionals.set(3);
      }
      if (struct.isSetEntriesWritten()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetEntriesToBeCompacted()) {
        oprot.writeI64(struct.entriesToBeCompacted);
      }
      if (struct.isSetEntriesRead()) {
        oprot.writeI64(struct.entriesRead);
      }
      if (struct.isSetEntriesWritten()) {
        oprot.writeI64(struct.entriesWritten);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCompactionStatusUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.state = org.apache.accumulo.core.compaction.thrift.TCompactionState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entriesToBeCompacted = iprot.readI64();
        struct.setEntriesToBeCompactedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.entriesRead = iprot.readI64();
        struct.setEntriesReadIsSet(true);
      }
      if (incoming.get(4)) {
        struct.entriesWritten = iprot.readI64();
        struct.setEntriesWrittenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
  private static void unusedMethod() {}
}

