/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.tasks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TaskRunnerInfo implements org.apache.thrift.TBase<TaskRunnerInfo, TaskRunnerInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TaskRunnerInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskRunnerInfo");

  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WORKER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("workerType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RESOURCE_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceGroup", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TaskRunnerInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TaskRunnerInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String hostname; // required
  public int port; // required
  /**
   * 
   * @see WorkerType
   */
  public @org.apache.thrift.annotation.Nullable WorkerType workerType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String resourceGroup; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOSTNAME((short)1, "hostname"),
    PORT((short)2, "port"),
    /**
     * 
     * @see WorkerType
     */
    WORKER_TYPE((short)3, "workerType"),
    RESOURCE_GROUP((short)4, "resourceGroup");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOSTNAME
          return HOSTNAME;
        case 2: // PORT
          return PORT;
        case 3: // WORKER_TYPE
          return WORKER_TYPE;
        case 4: // RESOURCE_GROUP
          return RESOURCE_GROUP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("workerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WorkerType.class)));
    tmpMap.put(_Fields.RESOURCE_GROUP, new org.apache.thrift.meta_data.FieldMetaData("resourceGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskRunnerInfo.class, metaDataMap);
  }

  public TaskRunnerInfo() {
  }

  public TaskRunnerInfo(
    java.lang.String hostname,
    int port,
    WorkerType workerType,
    java.lang.String resourceGroup)
  {
    this();
    this.hostname = hostname;
    this.port = port;
    setPortIsSet(true);
    this.workerType = workerType;
    this.resourceGroup = resourceGroup;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskRunnerInfo(TaskRunnerInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    this.port = other.port;
    if (other.isSetWorkerType()) {
      this.workerType = other.workerType;
    }
    if (other.isSetResourceGroup()) {
      this.resourceGroup = other.resourceGroup;
    }
  }

  @Override
  public TaskRunnerInfo deepCopy() {
    return new TaskRunnerInfo(this);
  }

  @Override
  public void clear() {
    this.hostname = null;
    setPortIsSet(false);
    this.port = 0;
    this.workerType = null;
    this.resourceGroup = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHostname() {
    return this.hostname;
  }

  public TaskRunnerInfo setHostname(@org.apache.thrift.annotation.Nullable java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public TaskRunnerInfo setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  /**
   * 
   * @see WorkerType
   */
  @org.apache.thrift.annotation.Nullable
  public WorkerType getWorkerType() {
    return this.workerType;
  }

  /**
   * 
   * @see WorkerType
   */
  public TaskRunnerInfo setWorkerType(@org.apache.thrift.annotation.Nullable WorkerType workerType) {
    this.workerType = workerType;
    return this;
  }

  public void unsetWorkerType() {
    this.workerType = null;
  }

  /** Returns true if field workerType is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerType() {
    return this.workerType != null;
  }

  public void setWorkerTypeIsSet(boolean value) {
    if (!value) {
      this.workerType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getResourceGroup() {
    return this.resourceGroup;
  }

  public TaskRunnerInfo setResourceGroup(@org.apache.thrift.annotation.Nullable java.lang.String resourceGroup) {
    this.resourceGroup = resourceGroup;
    return this;
  }

  public void unsetResourceGroup() {
    this.resourceGroup = null;
  }

  /** Returns true if field resourceGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceGroup() {
    return this.resourceGroup != null;
  }

  public void setResourceGroupIsSet(boolean value) {
    if (!value) {
      this.resourceGroup = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.Integer)value);
      }
      break;

    case WORKER_TYPE:
      if (value == null) {
        unsetWorkerType();
      } else {
        setWorkerType((WorkerType)value);
      }
      break;

    case RESOURCE_GROUP:
      if (value == null) {
        unsetResourceGroup();
      } else {
        setResourceGroup((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HOSTNAME:
      return getHostname();

    case PORT:
      return getPort();

    case WORKER_TYPE:
      return getWorkerType();

    case RESOURCE_GROUP:
      return getResourceGroup();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HOSTNAME:
      return isSetHostname();
    case PORT:
      return isSetPort();
    case WORKER_TYPE:
      return isSetWorkerType();
    case RESOURCE_GROUP:
      return isSetResourceGroup();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TaskRunnerInfo)
      return this.equals((TaskRunnerInfo)that);
    return false;
  }

  public boolean equals(TaskRunnerInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_workerType = true && this.isSetWorkerType();
    boolean that_present_workerType = true && that.isSetWorkerType();
    if (this_present_workerType || that_present_workerType) {
      if (!(this_present_workerType && that_present_workerType))
        return false;
      if (!this.workerType.equals(that.workerType))
        return false;
    }

    boolean this_present_resourceGroup = true && this.isSetResourceGroup();
    boolean that_present_resourceGroup = true && that.isSetResourceGroup();
    if (this_present_resourceGroup || that_present_resourceGroup) {
      if (!(this_present_resourceGroup && that_present_resourceGroup))
        return false;
      if (!this.resourceGroup.equals(that.resourceGroup))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHostname()) ? 131071 : 524287);
    if (isSetHostname())
      hashCode = hashCode * 8191 + hostname.hashCode();

    hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + ((isSetWorkerType()) ? 131071 : 524287);
    if (isSetWorkerType())
      hashCode = hashCode * 8191 + workerType.getValue();

    hashCode = hashCode * 8191 + ((isSetResourceGroup()) ? 131071 : 524287);
    if (isSetResourceGroup())
      hashCode = hashCode * 8191 + resourceGroup.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TaskRunnerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetHostname(), other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPort(), other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWorkerType(), other.isSetWorkerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerType, other.workerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResourceGroup(), other.isSetResourceGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceGroup, other.resourceGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TaskRunnerInfo(");
    boolean first = true;

    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workerType:");
    if (this.workerType == null) {
      sb.append("null");
    } else {
      sb.append(this.workerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceGroup:");
    if (this.resourceGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceGroup);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskRunnerInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TaskRunnerInfoStandardScheme getScheme() {
      return new TaskRunnerInfoStandardScheme();
    }
  }

  private static class TaskRunnerInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TaskRunnerInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskRunnerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WORKER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workerType = org.apache.accumulo.core.tasks.thrift.WorkerType.findByValue(iprot.readI32());
              struct.setWorkerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESOURCE_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceGroup = iprot.readString();
              struct.setResourceGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskRunnerInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      if (struct.workerType != null) {
        oprot.writeFieldBegin(WORKER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.workerType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.resourceGroup != null) {
        oprot.writeFieldBegin(RESOURCE_GROUP_FIELD_DESC);
        oprot.writeString(struct.resourceGroup);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskRunnerInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TaskRunnerInfoTupleScheme getScheme() {
      return new TaskRunnerInfoTupleScheme();
    }
  }

  private static class TaskRunnerInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TaskRunnerInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskRunnerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHostname()) {
        optionals.set(0);
      }
      if (struct.isSetPort()) {
        optionals.set(1);
      }
      if (struct.isSetWorkerType()) {
        optionals.set(2);
      }
      if (struct.isSetResourceGroup()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetWorkerType()) {
        oprot.writeI32(struct.workerType.getValue());
      }
      if (struct.isSetResourceGroup()) {
        oprot.writeString(struct.resourceGroup);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskRunnerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(2)) {
        struct.workerType = org.apache.accumulo.core.tasks.thrift.WorkerType.findByValue(iprot.readI32());
        struct.setWorkerTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.resourceGroup = iprot.readString();
        struct.setResourceGroupIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
  private static void unusedMethod() {}
}

