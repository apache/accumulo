/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.data.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-23")
public class TResourceRequest implements org.apache.thrift.TBase<TResourceRequest, TResourceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TResourceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResourceRequest");

  private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INTERRUPTIBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("interruptible", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("mem", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuTime", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResourceRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResourceRequestTupleSchemeFactory());
  }

  public String queueName; // required
  public boolean interruptible; // required
  public long mem; // optional
  public long cpuTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUEUE_NAME((short)1, "queueName"),
    INTERRUPTIBLE((short)2, "interruptible"),
    MEM((short)3, "mem"),
    CPU_TIME((short)4, "cpuTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUEUE_NAME
          return QUEUE_NAME;
        case 2: // INTERRUPTIBLE
          return INTERRUPTIBLE;
        case 3: // MEM
          return MEM;
        case 4: // CPU_TIME
          return CPU_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERRUPTIBLE_ISSET_ID = 0;
  private static final int __MEM_ISSET_ID = 1;
  private static final int __CPUTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MEM,_Fields.CPU_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERRUPTIBLE, new org.apache.thrift.meta_data.FieldMetaData("interruptible", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MEM, new org.apache.thrift.meta_data.FieldMetaData("mem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_TIME, new org.apache.thrift.meta_data.FieldMetaData("cpuTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResourceRequest.class, metaDataMap);
  }

  public TResourceRequest() {
  }

  public TResourceRequest(
    String queueName,
    boolean interruptible)
  {
    this();
    this.queueName = queueName;
    this.interruptible = interruptible;
    setInterruptibleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResourceRequest(TResourceRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQueueName()) {
      this.queueName = other.queueName;
    }
    this.interruptible = other.interruptible;
    this.mem = other.mem;
    this.cpuTime = other.cpuTime;
  }

  public TResourceRequest deepCopy() {
    return new TResourceRequest(this);
  }

  @Override
  public void clear() {
    this.queueName = null;
    setInterruptibleIsSet(false);
    this.interruptible = false;
    setMemIsSet(false);
    this.mem = 0;
    setCpuTimeIsSet(false);
    this.cpuTime = 0;
  }

  public String getQueueName() {
    return this.queueName;
  }

  public TResourceRequest setQueueName(String queueName) {
    this.queueName = queueName;
    return this;
  }

  public void unsetQueueName() {
    this.queueName = null;
  }

  /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueName() {
    return this.queueName != null;
  }

  public void setQueueNameIsSet(boolean value) {
    if (!value) {
      this.queueName = null;
    }
  }

  public boolean isInterruptible() {
    return this.interruptible;
  }

  public TResourceRequest setInterruptible(boolean interruptible) {
    this.interruptible = interruptible;
    setInterruptibleIsSet(true);
    return this;
  }

  public void unsetInterruptible() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERRUPTIBLE_ISSET_ID);
  }

  /** Returns true if field interruptible is set (has been assigned a value) and false otherwise */
  public boolean isSetInterruptible() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERRUPTIBLE_ISSET_ID);
  }

  public void setInterruptibleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERRUPTIBLE_ISSET_ID, value);
  }

  public long getMem() {
    return this.mem;
  }

  public TResourceRequest setMem(long mem) {
    this.mem = mem;
    setMemIsSet(true);
    return this;
  }

  public void unsetMem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEM_ISSET_ID);
  }

  /** Returns true if field mem is set (has been assigned a value) and false otherwise */
  public boolean isSetMem() {
    return EncodingUtils.testBit(__isset_bitfield, __MEM_ISSET_ID);
  }

  public void setMemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEM_ISSET_ID, value);
  }

  public long getCpuTime() {
    return this.cpuTime;
  }

  public TResourceRequest setCpuTime(long cpuTime) {
    this.cpuTime = cpuTime;
    setCpuTimeIsSet(true);
    return this;
  }

  public void unsetCpuTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPUTIME_ISSET_ID);
  }

  /** Returns true if field cpuTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CPUTIME_ISSET_ID);
  }

  public void setCpuTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPUTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUEUE_NAME:
      if (value == null) {
        unsetQueueName();
      } else {
        setQueueName((String)value);
      }
      break;

    case INTERRUPTIBLE:
      if (value == null) {
        unsetInterruptible();
      } else {
        setInterruptible((Boolean)value);
      }
      break;

    case MEM:
      if (value == null) {
        unsetMem();
      } else {
        setMem((Long)value);
      }
      break;

    case CPU_TIME:
      if (value == null) {
        unsetCpuTime();
      } else {
        setCpuTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUEUE_NAME:
      return getQueueName();

    case INTERRUPTIBLE:
      return isInterruptible();

    case MEM:
      return getMem();

    case CPU_TIME:
      return getCpuTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUEUE_NAME:
      return isSetQueueName();
    case INTERRUPTIBLE:
      return isSetInterruptible();
    case MEM:
      return isSetMem();
    case CPU_TIME:
      return isSetCpuTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResourceRequest)
      return this.equals((TResourceRequest)that);
    return false;
  }

  public boolean equals(TResourceRequest that) {
    if (that == null)
      return false;

    boolean this_present_queueName = true && this.isSetQueueName();
    boolean that_present_queueName = true && that.isSetQueueName();
    if (this_present_queueName || that_present_queueName) {
      if (!(this_present_queueName && that_present_queueName))
        return false;
      if (!this.queueName.equals(that.queueName))
        return false;
    }

    boolean this_present_interruptible = true;
    boolean that_present_interruptible = true;
    if (this_present_interruptible || that_present_interruptible) {
      if (!(this_present_interruptible && that_present_interruptible))
        return false;
      if (this.interruptible != that.interruptible)
        return false;
    }

    boolean this_present_mem = true && this.isSetMem();
    boolean that_present_mem = true && that.isSetMem();
    if (this_present_mem || that_present_mem) {
      if (!(this_present_mem && that_present_mem))
        return false;
      if (this.mem != that.mem)
        return false;
    }

    boolean this_present_cpuTime = true && this.isSetCpuTime();
    boolean that_present_cpuTime = true && that.isSetCpuTime();
    if (this_present_cpuTime || that_present_cpuTime) {
      if (!(this_present_cpuTime && that_present_cpuTime))
        return false;
      if (this.cpuTime != that.cpuTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_queueName = true && (isSetQueueName());
    list.add(present_queueName);
    if (present_queueName)
      list.add(queueName);

    boolean present_interruptible = true;
    list.add(present_interruptible);
    if (present_interruptible)
      list.add(interruptible);

    boolean present_mem = true && (isSetMem());
    list.add(present_mem);
    if (present_mem)
      list.add(mem);

    boolean present_cpuTime = true && (isSetCpuTime());
    list.add(present_cpuTime);
    if (present_cpuTime)
      list.add(cpuTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(TResourceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterruptible()).compareTo(other.isSetInterruptible());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterruptible()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interruptible, other.interruptible);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMem()).compareTo(other.isSetMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem, other.mem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuTime()).compareTo(other.isSetCpuTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuTime, other.cpuTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResourceRequest(");
    boolean first = true;

    sb.append("queueName:");
    if (this.queueName == null) {
      sb.append("null");
    } else {
      sb.append(this.queueName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interruptible:");
    sb.append(this.interruptible);
    first = false;
    if (isSetMem()) {
      if (!first) sb.append(", ");
      sb.append("mem:");
      sb.append(this.mem);
      first = false;
    }
    if (isSetCpuTime()) {
      if (!first) sb.append(", ");
      sb.append("cpuTime:");
      sb.append(this.cpuTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceRequestStandardSchemeFactory implements SchemeFactory {
    public TResourceRequestStandardScheme getScheme() {
      return new TResourceRequestStandardScheme();
    }
  }

  private static class TResourceRequestStandardScheme extends StandardScheme<TResourceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResourceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUEUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queueName = iprot.readString();
              struct.setQueueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERRUPTIBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.interruptible = iprot.readBool();
              struct.setInterruptibleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem = iprot.readI64();
              struct.setMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpuTime = iprot.readI64();
              struct.setCpuTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResourceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.queueName != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(struct.queueName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERRUPTIBLE_FIELD_DESC);
      oprot.writeBool(struct.interruptible);
      oprot.writeFieldEnd();
      if (struct.isSetMem()) {
        oprot.writeFieldBegin(MEM_FIELD_DESC);
        oprot.writeI64(struct.mem);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpuTime()) {
        oprot.writeFieldBegin(CPU_TIME_FIELD_DESC);
        oprot.writeI64(struct.cpuTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceRequestTupleSchemeFactory implements SchemeFactory {
    public TResourceRequestTupleScheme getScheme() {
      return new TResourceRequestTupleScheme();
    }
  }

  private static class TResourceRequestTupleScheme extends TupleScheme<TResourceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResourceRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQueueName()) {
        optionals.set(0);
      }
      if (struct.isSetInterruptible()) {
        optionals.set(1);
      }
      if (struct.isSetMem()) {
        optionals.set(2);
      }
      if (struct.isSetCpuTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetQueueName()) {
        oprot.writeString(struct.queueName);
      }
      if (struct.isSetInterruptible()) {
        oprot.writeBool(struct.interruptible);
      }
      if (struct.isSetMem()) {
        oprot.writeI64(struct.mem);
      }
      if (struct.isSetCpuTime()) {
        oprot.writeI64(struct.cpuTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResourceRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.queueName = iprot.readString();
        struct.setQueueNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.interruptible = iprot.readBool();
        struct.setInterruptibleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mem = iprot.readI64();
        struct.setMemIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpuTime = iprot.readI64();
        struct.setCpuTimeIsSet(true);
      }
    }
  }

}

