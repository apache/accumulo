/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.accumulo.core.conf;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.apache.accumulo.core.conf.Property.markdownRef;

import java.io.IOException;
import java.io.PrintStream;
import java.util.TreeMap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParser;

/**
 * This class generates documentation to inform users of the available configuration properties in a
 * presentable form.
 */
public class ConfigurationDocGen {
  private final PrintStream doc;
  private final TreeMap<String,Property> sortedProps = new TreeMap<>();
  private final Gson gsonPrettyPrinter =
      new GsonBuilder().disableJdkUnsafe().setPrettyPrinting().create();

  private void generate() {
    doc.print("""
        ---
        title: Server Properties (4.x)
        category: configuration
        order: 4
        ---

        <!--
          WARNING: Do not edit this file. It is a generated file that is copied from Accumulo
          build (from core/target/generated-docs)
          -->

        Below are properties set in `accumulo.properties` or the Accumulo shell that configure
        Accumulo servers (i.e. tablet server, manager, etc). Properties labeled 'Experimental'
        should not be considered stable and have a higher risk of changing in the future.

        <table>
          <thead>
            <tr>
              <th>Property</th>
              <th>Description</th>
            </tr>
          </thead>
        <tbody>
        """);

    for (Property prop : sortedProps.values()) {
      if (prop.getType() == PropertyType.PREFIX) {
        prefixRow(prop);
      } else {
        propertyRow(prop);
      }
    }

    doc.println("""
          </tbody>
        </table>

        ### Property Types

        <table>
          <thead>
            <tr>
              <th>Type</th>
              <th>Description</th>
            </tr>
          </thead>
        <tbody>
        """);

    for (PropertyType type : PropertyType.values()) {
      if (type != PropertyType.PREFIX) {
        doc.printf("""
            <tr>
            <td>%s</td>
            <td markdown="1">

            %s

            </td>
            </tr>
            """, type.toString(), type.getFormatDescription());
      }
    }

    doc.println("""
          </tbody>
        </table>
        """);

    doc.close();
  }

  private void prefixRow(Property prefix) {
    boolean depr = prefix.isDeprecated();
    doc.printf("""
        <tr>
        <td markdown="1"><a name="%sprefix" class="prop"></a>
        %s**%s\\***%s
        </td>
        <td markdown="1" style="max-width: 600px">
        %s
        **Available since:** %s<br>
        %s%s

        %s

        </td>
        </tr>
        """, prefix.getKey().replace(".", "_"), depr ? "~~" : "", prefix.getKey(), depr ? "~~" : "",
        prefix.isExperimental() ? "**&#9888;Experimental&#9888;**<br>" : "",
        prefix.availableSince(),
        depr ? "*Deprecated since:* " + prefix.deprecatedSince() + "<br>" : "",
        depr && prefix.isReplaced()
            ? "*Replaced by:* %s<br>".formatted(markdownRef(prefix.replacedBy().getKey())) : "",
        prefix.getDescription());
  }

  private void propertyRow(Property prop) {
    boolean depr = prop.isDeprecated();
    String del = depr ? "~~" : "";
    String availableSince = prop.getKey().startsWith("manager.")
        && (prop.availableSince().startsWith("1.") || prop.availableSince().startsWith("2.0"))
            ? "2.1.0 (formerly *master." + prop.getKey().substring(8) + "* since "
                + prop.availableSince() + ")"
            : prop.availableSince();
    String defaultValue = prop.getDefaultValue();
    if (defaultValue.isEmpty()) {
      defaultValue = "empty";
    } else if (prop.getType() == PropertyType.CLASSNAME
        && defaultValue.startsWith("org.apache.accumulo")) {
      defaultValue = "{% jlink -f " + defaultValue + " %}";
    } else {
      defaultValue = switch (prop.getType()) {
        case JSON, FATE_META_CONFIG, FATE_USER_CONFIG -> """
            `%s`

            Formatted JSON (for convenience only):
            ```json
            %s
            ```
            """.formatted(defaultValue,
            gsonPrettyPrinter.toJson(JsonParser.parseString(defaultValue)));
        default -> "`%s`".formatted(defaultValue);
      };
    }
    doc.printf("""
        <tr>
        <td markdown="1"><a name="%s" class="prop"></a>
        %s%s%s
        </td>
        <td markdown="1" style="max-width: 600px">
        %s
        **Available since:** %s<br>
        %s%s

        %s

        **type:** %s, **zk mutable:** %s, **default value:** %s
        </td>
        </tr>
        """, prop.getKey().replace(".", "_"), del, prop.getKey(), del,
        prop.isExperimental() ? "**&#9888;Experimental&#9888;**<br>" : "", availableSince,
        depr ? "*Deprecated since:* " + prop.deprecatedSince() + "<br>" : "",
        depr && prop.isReplaced()
            ? "*Replaced by:* %s<br>".formatted(markdownRef(prop.replacedBy().getKey())) : "",
        prop.getDescription(), prop.getType().toString(), isZooKeeperMutable(prop), defaultValue);
  }

  private ConfigurationDocGen(PrintStream doc) {
    this.doc = doc;
    for (Property prop : Property.values()) {
      this.sortedProps.put(prop.getKey(), prop);
    }
  }

  private String isZooKeeperMutable(Property prop) {
    if (!Property.isValidZooPropertyKey(prop.getKey())) {
      return "no";
    }
    if (Property.isFixedZooPropertyKey(prop)) {
      String serverName = prop.getKey().startsWith("compaction.coordinator.") ? "manager"
          : prop.getKey().split("[.]")[0];
      return "yes, but requires restart of the " + serverName;
    }
    return "yes";
  }

  /**
   * Generates documentation for accumulo.properties file usage. Arguments are: "--generate-markdown
   * filename"
   *
   * @param args command-line arguments
   * @throws IllegalArgumentException if args is invalid
   */
  public static void main(String[] args) throws IOException {
    if (args.length == 2 && args[0].equals("--generate-markdown")) {
      try (var printStream = new PrintStream(args[1], UTF_8)) {
        new ConfigurationDocGen(printStream).generate();
      }
    } else {
      throw new IllegalArgumentException(
          "Usage: " + ConfigurationDocGen.class.getName() + " --generate-markdown <filename>");
    }
  }
}
