/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.compaction.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class CompactionJob implements org.apache.thrift.TBase<CompactionJob, CompactionJob._Fields>, java.io.Serializable, Cloneable, Comparable<CompactionJob> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompactionJob");

  private static final org.apache.thrift.protocol.TField TRACE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("traceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField("credentials", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField COMPACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("compactionId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EXTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("extent", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("files", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField READ_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("readRate", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField WRITE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("writeRate", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ITERATOR_SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("iteratorSettings", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField OUTPUT_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFile", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CompactionJobStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CompactionJobTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.accumulo.core.trace.thrift.TInfo traceInfo; // required
  public @org.apache.thrift.annotation.Nullable org.apache.accumulo.core.securityImpl.thrift.TCredentials credentials; // required
  public long compactionId; // required
  public @org.apache.thrift.annotation.Nullable org.apache.accumulo.core.dataImpl.thrift.TKeyExtent extent; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> files; // required
  public int priority; // required
  public int readRate; // required
  public int writeRate; // required
  public @org.apache.thrift.annotation.Nullable org.apache.accumulo.core.tabletserver.thrift.IteratorConfig iteratorSettings; // required
  /**
   * 
   * @see org.apache.accumulo.core.tabletserver.thrift.CompactionType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.accumulo.core.tabletserver.thrift.CompactionType type; // required
  /**
   * 
   * @see org.apache.accumulo.core.tabletserver.thrift.CompactionReason
   */
  public @org.apache.thrift.annotation.Nullable org.apache.accumulo.core.tabletserver.thrift.CompactionReason reason; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String outputFile; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_INFO((short)1, "traceInfo"),
    CREDENTIALS((short)2, "credentials"),
    COMPACTION_ID((short)3, "compactionId"),
    EXTENT((short)5, "extent"),
    FILES((short)6, "files"),
    PRIORITY((short)7, "priority"),
    READ_RATE((short)8, "readRate"),
    WRITE_RATE((short)9, "writeRate"),
    ITERATOR_SETTINGS((short)10, "iteratorSettings"),
    /**
     * 
     * @see org.apache.accumulo.core.tabletserver.thrift.CompactionType
     */
    TYPE((short)11, "type"),
    /**
     * 
     * @see org.apache.accumulo.core.tabletserver.thrift.CompactionReason
     */
    REASON((short)12, "reason"),
    OUTPUT_FILE((short)13, "outputFile");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_INFO
          return TRACE_INFO;
        case 2: // CREDENTIALS
          return CREDENTIALS;
        case 3: // COMPACTION_ID
          return COMPACTION_ID;
        case 5: // EXTENT
          return EXTENT;
        case 6: // FILES
          return FILES;
        case 7: // PRIORITY
          return PRIORITY;
        case 8: // READ_RATE
          return READ_RATE;
        case 9: // WRITE_RATE
          return WRITE_RATE;
        case 10: // ITERATOR_SETTINGS
          return ITERATOR_SETTINGS;
        case 11: // TYPE
          return TYPE;
        case 12: // REASON
          return REASON;
        case 13: // OUTPUT_FILE
          return OUTPUT_FILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPACTIONID_ISSET_ID = 0;
  private static final int __PRIORITY_ISSET_ID = 1;
  private static final int __READRATE_ISSET_ID = 2;
  private static final int __WRITERATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_INFO, new org.apache.thrift.meta_data.FieldMetaData("traceInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.accumulo.core.trace.thrift.TInfo.class)));
    tmpMap.put(_Fields.CREDENTIALS, new org.apache.thrift.meta_data.FieldMetaData("credentials", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.accumulo.core.securityImpl.thrift.TCredentials.class)));
    tmpMap.put(_Fields.COMPACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("compactionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXTENT, new org.apache.thrift.meta_data.FieldMetaData("extent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.accumulo.core.dataImpl.thrift.TKeyExtent.class)));
    tmpMap.put(_Fields.FILES, new org.apache.thrift.meta_data.FieldMetaData("files", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.READ_RATE, new org.apache.thrift.meta_data.FieldMetaData("readRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WRITE_RATE, new org.apache.thrift.meta_data.FieldMetaData("writeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITERATOR_SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("iteratorSettings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.accumulo.core.tabletserver.thrift.IteratorConfig.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.accumulo.core.tabletserver.thrift.CompactionType.class)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.accumulo.core.tabletserver.thrift.CompactionReason.class)));
    tmpMap.put(_Fields.OUTPUT_FILE, new org.apache.thrift.meta_data.FieldMetaData("outputFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompactionJob.class, metaDataMap);
  }

  public CompactionJob() {
  }

  public CompactionJob(
    org.apache.accumulo.core.trace.thrift.TInfo traceInfo,
    org.apache.accumulo.core.securityImpl.thrift.TCredentials credentials,
    long compactionId,
    org.apache.accumulo.core.dataImpl.thrift.TKeyExtent extent,
    java.util.List<java.lang.String> files,
    int priority,
    int readRate,
    int writeRate,
    org.apache.accumulo.core.tabletserver.thrift.IteratorConfig iteratorSettings,
    org.apache.accumulo.core.tabletserver.thrift.CompactionType type,
    org.apache.accumulo.core.tabletserver.thrift.CompactionReason reason,
    java.lang.String outputFile)
  {
    this();
    this.traceInfo = traceInfo;
    this.credentials = credentials;
    this.compactionId = compactionId;
    setCompactionIdIsSet(true);
    this.extent = extent;
    this.files = files;
    this.priority = priority;
    setPriorityIsSet(true);
    this.readRate = readRate;
    setReadRateIsSet(true);
    this.writeRate = writeRate;
    setWriteRateIsSet(true);
    this.iteratorSettings = iteratorSettings;
    this.type = type;
    this.reason = reason;
    this.outputFile = outputFile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompactionJob(CompactionJob other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTraceInfo()) {
      this.traceInfo = new org.apache.accumulo.core.trace.thrift.TInfo(other.traceInfo);
    }
    if (other.isSetCredentials()) {
      this.credentials = new org.apache.accumulo.core.securityImpl.thrift.TCredentials(other.credentials);
    }
    this.compactionId = other.compactionId;
    if (other.isSetExtent()) {
      this.extent = new org.apache.accumulo.core.dataImpl.thrift.TKeyExtent(other.extent);
    }
    if (other.isSetFiles()) {
      java.util.List<java.lang.String> __this__files = new java.util.ArrayList<java.lang.String>(other.files);
      this.files = __this__files;
    }
    this.priority = other.priority;
    this.readRate = other.readRate;
    this.writeRate = other.writeRate;
    if (other.isSetIteratorSettings()) {
      this.iteratorSettings = new org.apache.accumulo.core.tabletserver.thrift.IteratorConfig(other.iteratorSettings);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetOutputFile()) {
      this.outputFile = other.outputFile;
    }
  }

  public CompactionJob deepCopy() {
    return new CompactionJob(this);
  }

  @Override
  public void clear() {
    this.traceInfo = null;
    this.credentials = null;
    setCompactionIdIsSet(false);
    this.compactionId = 0;
    this.extent = null;
    this.files = null;
    setPriorityIsSet(false);
    this.priority = 0;
    setReadRateIsSet(false);
    this.readRate = 0;
    setWriteRateIsSet(false);
    this.writeRate = 0;
    this.iteratorSettings = null;
    this.type = null;
    this.reason = null;
    this.outputFile = null;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.accumulo.core.trace.thrift.TInfo getTraceInfo() {
    return this.traceInfo;
  }

  public CompactionJob setTraceInfo(@org.apache.thrift.annotation.Nullable org.apache.accumulo.core.trace.thrift.TInfo traceInfo) {
    this.traceInfo = traceInfo;
    return this;
  }

  public void unsetTraceInfo() {
    this.traceInfo = null;
  }

  /** Returns true if field traceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceInfo() {
    return this.traceInfo != null;
  }

  public void setTraceInfoIsSet(boolean value) {
    if (!value) {
      this.traceInfo = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.accumulo.core.securityImpl.thrift.TCredentials getCredentials() {
    return this.credentials;
  }

  public CompactionJob setCredentials(@org.apache.thrift.annotation.Nullable org.apache.accumulo.core.securityImpl.thrift.TCredentials credentials) {
    this.credentials = credentials;
    return this;
  }

  public void unsetCredentials() {
    this.credentials = null;
  }

  /** Returns true if field credentials is set (has been assigned a value) and false otherwise */
  public boolean isSetCredentials() {
    return this.credentials != null;
  }

  public void setCredentialsIsSet(boolean value) {
    if (!value) {
      this.credentials = null;
    }
  }

  public long getCompactionId() {
    return this.compactionId;
  }

  public CompactionJob setCompactionId(long compactionId) {
    this.compactionId = compactionId;
    setCompactionIdIsSet(true);
    return this;
  }

  public void unsetCompactionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPACTIONID_ISSET_ID);
  }

  /** Returns true if field compactionId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompactionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPACTIONID_ISSET_ID);
  }

  public void setCompactionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPACTIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.accumulo.core.dataImpl.thrift.TKeyExtent getExtent() {
    return this.extent;
  }

  public CompactionJob setExtent(@org.apache.thrift.annotation.Nullable org.apache.accumulo.core.dataImpl.thrift.TKeyExtent extent) {
    this.extent = extent;
    return this;
  }

  public void unsetExtent() {
    this.extent = null;
  }

  /** Returns true if field extent is set (has been assigned a value) and false otherwise */
  public boolean isSetExtent() {
    return this.extent != null;
  }

  public void setExtentIsSet(boolean value) {
    if (!value) {
      this.extent = null;
    }
  }

  public int getFilesSize() {
    return (this.files == null) ? 0 : this.files.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getFilesIterator() {
    return (this.files == null) ? null : this.files.iterator();
  }

  public void addToFiles(java.lang.String elem) {
    if (this.files == null) {
      this.files = new java.util.ArrayList<java.lang.String>();
    }
    this.files.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getFiles() {
    return this.files;
  }

  public CompactionJob setFiles(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> files) {
    this.files = files;
    return this;
  }

  public void unsetFiles() {
    this.files = null;
  }

  /** Returns true if field files is set (has been assigned a value) and false otherwise */
  public boolean isSetFiles() {
    return this.files != null;
  }

  public void setFilesIsSet(boolean value) {
    if (!value) {
      this.files = null;
    }
  }

  public int getPriority() {
    return this.priority;
  }

  public CompactionJob setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public int getReadRate() {
    return this.readRate;
  }

  public CompactionJob setReadRate(int readRate) {
    this.readRate = readRate;
    setReadRateIsSet(true);
    return this;
  }

  public void unsetReadRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READRATE_ISSET_ID);
  }

  /** Returns true if field readRate is set (has been assigned a value) and false otherwise */
  public boolean isSetReadRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READRATE_ISSET_ID);
  }

  public void setReadRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READRATE_ISSET_ID, value);
  }

  public int getWriteRate() {
    return this.writeRate;
  }

  public CompactionJob setWriteRate(int writeRate) {
    this.writeRate = writeRate;
    setWriteRateIsSet(true);
    return this;
  }

  public void unsetWriteRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITERATE_ISSET_ID);
  }

  /** Returns true if field writeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITERATE_ISSET_ID);
  }

  public void setWriteRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITERATE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.accumulo.core.tabletserver.thrift.IteratorConfig getIteratorSettings() {
    return this.iteratorSettings;
  }

  public CompactionJob setIteratorSettings(@org.apache.thrift.annotation.Nullable org.apache.accumulo.core.tabletserver.thrift.IteratorConfig iteratorSettings) {
    this.iteratorSettings = iteratorSettings;
    return this;
  }

  public void unsetIteratorSettings() {
    this.iteratorSettings = null;
  }

  /** Returns true if field iteratorSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetIteratorSettings() {
    return this.iteratorSettings != null;
  }

  public void setIteratorSettingsIsSet(boolean value) {
    if (!value) {
      this.iteratorSettings = null;
    }
  }

  /**
   * 
   * @see org.apache.accumulo.core.tabletserver.thrift.CompactionType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.accumulo.core.tabletserver.thrift.CompactionType getType() {
    return this.type;
  }

  /**
   * 
   * @see org.apache.accumulo.core.tabletserver.thrift.CompactionType
   */
  public CompactionJob setType(@org.apache.thrift.annotation.Nullable org.apache.accumulo.core.tabletserver.thrift.CompactionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 
   * @see org.apache.accumulo.core.tabletserver.thrift.CompactionReason
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.accumulo.core.tabletserver.thrift.CompactionReason getReason() {
    return this.reason;
  }

  /**
   * 
   * @see org.apache.accumulo.core.tabletserver.thrift.CompactionReason
   */
  public CompactionJob setReason(@org.apache.thrift.annotation.Nullable org.apache.accumulo.core.tabletserver.thrift.CompactionReason reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOutputFile() {
    return this.outputFile;
  }

  public CompactionJob setOutputFile(@org.apache.thrift.annotation.Nullable java.lang.String outputFile) {
    this.outputFile = outputFile;
    return this;
  }

  public void unsetOutputFile() {
    this.outputFile = null;
  }

  /** Returns true if field outputFile is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputFile() {
    return this.outputFile != null;
  }

  public void setOutputFileIsSet(boolean value) {
    if (!value) {
      this.outputFile = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TRACE_INFO:
      if (value == null) {
        unsetTraceInfo();
      } else {
        setTraceInfo((org.apache.accumulo.core.trace.thrift.TInfo)value);
      }
      break;

    case CREDENTIALS:
      if (value == null) {
        unsetCredentials();
      } else {
        setCredentials((org.apache.accumulo.core.securityImpl.thrift.TCredentials)value);
      }
      break;

    case COMPACTION_ID:
      if (value == null) {
        unsetCompactionId();
      } else {
        setCompactionId((java.lang.Long)value);
      }
      break;

    case EXTENT:
      if (value == null) {
        unsetExtent();
      } else {
        setExtent((org.apache.accumulo.core.dataImpl.thrift.TKeyExtent)value);
      }
      break;

    case FILES:
      if (value == null) {
        unsetFiles();
      } else {
        setFiles((java.util.List<java.lang.String>)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((java.lang.Integer)value);
      }
      break;

    case READ_RATE:
      if (value == null) {
        unsetReadRate();
      } else {
        setReadRate((java.lang.Integer)value);
      }
      break;

    case WRITE_RATE:
      if (value == null) {
        unsetWriteRate();
      } else {
        setWriteRate((java.lang.Integer)value);
      }
      break;

    case ITERATOR_SETTINGS:
      if (value == null) {
        unsetIteratorSettings();
      } else {
        setIteratorSettings((org.apache.accumulo.core.tabletserver.thrift.IteratorConfig)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((org.apache.accumulo.core.tabletserver.thrift.CompactionType)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((org.apache.accumulo.core.tabletserver.thrift.CompactionReason)value);
      }
      break;

    case OUTPUT_FILE:
      if (value == null) {
        unsetOutputFile();
      } else {
        setOutputFile((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_INFO:
      return getTraceInfo();

    case CREDENTIALS:
      return getCredentials();

    case COMPACTION_ID:
      return getCompactionId();

    case EXTENT:
      return getExtent();

    case FILES:
      return getFiles();

    case PRIORITY:
      return getPriority();

    case READ_RATE:
      return getReadRate();

    case WRITE_RATE:
      return getWriteRate();

    case ITERATOR_SETTINGS:
      return getIteratorSettings();

    case TYPE:
      return getType();

    case REASON:
      return getReason();

    case OUTPUT_FILE:
      return getOutputFile();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TRACE_INFO:
      return isSetTraceInfo();
    case CREDENTIALS:
      return isSetCredentials();
    case COMPACTION_ID:
      return isSetCompactionId();
    case EXTENT:
      return isSetExtent();
    case FILES:
      return isSetFiles();
    case PRIORITY:
      return isSetPriority();
    case READ_RATE:
      return isSetReadRate();
    case WRITE_RATE:
      return isSetWriteRate();
    case ITERATOR_SETTINGS:
      return isSetIteratorSettings();
    case TYPE:
      return isSetType();
    case REASON:
      return isSetReason();
    case OUTPUT_FILE:
      return isSetOutputFile();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CompactionJob)
      return this.equals((CompactionJob)that);
    return false;
  }

  public boolean equals(CompactionJob that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_traceInfo = true && this.isSetTraceInfo();
    boolean that_present_traceInfo = true && that.isSetTraceInfo();
    if (this_present_traceInfo || that_present_traceInfo) {
      if (!(this_present_traceInfo && that_present_traceInfo))
        return false;
      if (!this.traceInfo.equals(that.traceInfo))
        return false;
    }

    boolean this_present_credentials = true && this.isSetCredentials();
    boolean that_present_credentials = true && that.isSetCredentials();
    if (this_present_credentials || that_present_credentials) {
      if (!(this_present_credentials && that_present_credentials))
        return false;
      if (!this.credentials.equals(that.credentials))
        return false;
    }

    boolean this_present_compactionId = true;
    boolean that_present_compactionId = true;
    if (this_present_compactionId || that_present_compactionId) {
      if (!(this_present_compactionId && that_present_compactionId))
        return false;
      if (this.compactionId != that.compactionId)
        return false;
    }

    boolean this_present_extent = true && this.isSetExtent();
    boolean that_present_extent = true && that.isSetExtent();
    if (this_present_extent || that_present_extent) {
      if (!(this_present_extent && that_present_extent))
        return false;
      if (!this.extent.equals(that.extent))
        return false;
    }

    boolean this_present_files = true && this.isSetFiles();
    boolean that_present_files = true && that.isSetFiles();
    if (this_present_files || that_present_files) {
      if (!(this_present_files && that_present_files))
        return false;
      if (!this.files.equals(that.files))
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_readRate = true;
    boolean that_present_readRate = true;
    if (this_present_readRate || that_present_readRate) {
      if (!(this_present_readRate && that_present_readRate))
        return false;
      if (this.readRate != that.readRate)
        return false;
    }

    boolean this_present_writeRate = true;
    boolean that_present_writeRate = true;
    if (this_present_writeRate || that_present_writeRate) {
      if (!(this_present_writeRate && that_present_writeRate))
        return false;
      if (this.writeRate != that.writeRate)
        return false;
    }

    boolean this_present_iteratorSettings = true && this.isSetIteratorSettings();
    boolean that_present_iteratorSettings = true && that.isSetIteratorSettings();
    if (this_present_iteratorSettings || that_present_iteratorSettings) {
      if (!(this_present_iteratorSettings && that_present_iteratorSettings))
        return false;
      if (!this.iteratorSettings.equals(that.iteratorSettings))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_outputFile = true && this.isSetOutputFile();
    boolean that_present_outputFile = true && that.isSetOutputFile();
    if (this_present_outputFile || that_present_outputFile) {
      if (!(this_present_outputFile && that_present_outputFile))
        return false;
      if (!this.outputFile.equals(that.outputFile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTraceInfo()) ? 131071 : 524287);
    if (isSetTraceInfo())
      hashCode = hashCode * 8191 + traceInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetCredentials()) ? 131071 : 524287);
    if (isSetCredentials())
      hashCode = hashCode * 8191 + credentials.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(compactionId);

    hashCode = hashCode * 8191 + ((isSetExtent()) ? 131071 : 524287);
    if (isSetExtent())
      hashCode = hashCode * 8191 + extent.hashCode();

    hashCode = hashCode * 8191 + ((isSetFiles()) ? 131071 : 524287);
    if (isSetFiles())
      hashCode = hashCode * 8191 + files.hashCode();

    hashCode = hashCode * 8191 + priority;

    hashCode = hashCode * 8191 + readRate;

    hashCode = hashCode * 8191 + writeRate;

    hashCode = hashCode * 8191 + ((isSetIteratorSettings()) ? 131071 : 524287);
    if (isSetIteratorSettings())
      hashCode = hashCode * 8191 + iteratorSettings.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetReason()) ? 131071 : 524287);
    if (isSetReason())
      hashCode = hashCode * 8191 + reason.getValue();

    hashCode = hashCode * 8191 + ((isSetOutputFile()) ? 131071 : 524287);
    if (isSetOutputFile())
      hashCode = hashCode * 8191 + outputFile.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CompactionJob other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTraceInfo()).compareTo(other.isSetTraceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceInfo, other.traceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCredentials()).compareTo(other.isSetCredentials());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredentials()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompactionId()).compareTo(other.isSetCompactionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompactionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compactionId, other.compactionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExtent()).compareTo(other.isSetExtent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extent, other.extent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.files, other.files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadRate()).compareTo(other.isSetReadRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readRate, other.readRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWriteRate()).compareTo(other.isSetWriteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeRate, other.writeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIteratorSettings()).compareTo(other.isSetIteratorSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIteratorSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iteratorSettings, other.iteratorSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutputFile()).compareTo(other.isSetOutputFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFile, other.outputFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CompactionJob(");
    boolean first = true;

    sb.append("traceInfo:");
    if (this.traceInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.traceInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("credentials:");
    if (this.credentials == null) {
      sb.append("null");
    } else {
      sb.append(this.credentials);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compactionId:");
    sb.append(this.compactionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extent:");
    if (this.extent == null) {
      sb.append("null");
    } else {
      sb.append(this.extent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("files:");
    if (this.files == null) {
      sb.append("null");
    } else {
      sb.append(this.files);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readRate:");
    sb.append(this.readRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeRate:");
    sb.append(this.writeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iteratorSettings:");
    if (this.iteratorSettings == null) {
      sb.append("null");
    } else {
      sb.append(this.iteratorSettings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputFile:");
    if (this.outputFile == null) {
      sb.append("null");
    } else {
      sb.append(this.outputFile);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (traceInfo != null) {
      traceInfo.validate();
    }
    if (credentials != null) {
      credentials.validate();
    }
    if (extent != null) {
      extent.validate();
    }
    if (iteratorSettings != null) {
      iteratorSettings.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompactionJobStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CompactionJobStandardScheme getScheme() {
      return new CompactionJobStandardScheme();
    }
  }

  private static class CompactionJobStandardScheme extends org.apache.thrift.scheme.StandardScheme<CompactionJob> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompactionJob struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.traceInfo = new org.apache.accumulo.core.trace.thrift.TInfo();
              struct.traceInfo.read(iprot);
              struct.setTraceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREDENTIALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.credentials = new org.apache.accumulo.core.securityImpl.thrift.TCredentials();
              struct.credentials.read(iprot);
              struct.setCredentialsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.compactionId = iprot.readI64();
              struct.setCompactionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extent = new org.apache.accumulo.core.dataImpl.thrift.TKeyExtent();
              struct.extent.read(iprot);
              struct.setExtentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.files = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.files.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // READ_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readRate = iprot.readI32();
              struct.setReadRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WRITE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.writeRate = iprot.readI32();
              struct.setWriteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ITERATOR_SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.iteratorSettings = new org.apache.accumulo.core.tabletserver.thrift.IteratorConfig();
              struct.iteratorSettings.read(iprot);
              struct.setIteratorSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.accumulo.core.tabletserver.thrift.CompactionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reason = org.apache.accumulo.core.tabletserver.thrift.CompactionReason.findByValue(iprot.readI32());
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OUTPUT_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputFile = iprot.readString();
              struct.setOutputFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompactionJob struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.traceInfo != null) {
        oprot.writeFieldBegin(TRACE_INFO_FIELD_DESC);
        struct.traceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        struct.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPACTION_ID_FIELD_DESC);
      oprot.writeI64(struct.compactionId);
      oprot.writeFieldEnd();
      if (struct.extent != null) {
        oprot.writeFieldBegin(EXTENT_FIELD_DESC);
        struct.extent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.files != null) {
        oprot.writeFieldBegin(FILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.files.size()));
          for (java.lang.String _iter3 : struct.files)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_RATE_FIELD_DESC);
      oprot.writeI32(struct.readRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRITE_RATE_FIELD_DESC);
      oprot.writeI32(struct.writeRate);
      oprot.writeFieldEnd();
      if (struct.iteratorSettings != null) {
        oprot.writeFieldBegin(ITERATOR_SETTINGS_FIELD_DESC);
        struct.iteratorSettings.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeI32(struct.reason.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.outputFile != null) {
        oprot.writeFieldBegin(OUTPUT_FILE_FIELD_DESC);
        oprot.writeString(struct.outputFile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompactionJobTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CompactionJobTupleScheme getScheme() {
      return new CompactionJobTupleScheme();
    }
  }

  private static class CompactionJobTupleScheme extends org.apache.thrift.scheme.TupleScheme<CompactionJob> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompactionJob struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTraceInfo()) {
        optionals.set(0);
      }
      if (struct.isSetCredentials()) {
        optionals.set(1);
      }
      if (struct.isSetCompactionId()) {
        optionals.set(2);
      }
      if (struct.isSetExtent()) {
        optionals.set(3);
      }
      if (struct.isSetFiles()) {
        optionals.set(4);
      }
      if (struct.isSetPriority()) {
        optionals.set(5);
      }
      if (struct.isSetReadRate()) {
        optionals.set(6);
      }
      if (struct.isSetWriteRate()) {
        optionals.set(7);
      }
      if (struct.isSetIteratorSettings()) {
        optionals.set(8);
      }
      if (struct.isSetType()) {
        optionals.set(9);
      }
      if (struct.isSetReason()) {
        optionals.set(10);
      }
      if (struct.isSetOutputFile()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTraceInfo()) {
        struct.traceInfo.write(oprot);
      }
      if (struct.isSetCredentials()) {
        struct.credentials.write(oprot);
      }
      if (struct.isSetCompactionId()) {
        oprot.writeI64(struct.compactionId);
      }
      if (struct.isSetExtent()) {
        struct.extent.write(oprot);
      }
      if (struct.isSetFiles()) {
        {
          oprot.writeI32(struct.files.size());
          for (java.lang.String _iter4 : struct.files)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetReadRate()) {
        oprot.writeI32(struct.readRate);
      }
      if (struct.isSetWriteRate()) {
        oprot.writeI32(struct.writeRate);
      }
      if (struct.isSetIteratorSettings()) {
        struct.iteratorSettings.write(oprot);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetReason()) {
        oprot.writeI32(struct.reason.getValue());
      }
      if (struct.isSetOutputFile()) {
        oprot.writeString(struct.outputFile);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompactionJob struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.traceInfo = new org.apache.accumulo.core.trace.thrift.TInfo();
        struct.traceInfo.read(iprot);
        struct.setTraceInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.credentials = new org.apache.accumulo.core.securityImpl.thrift.TCredentials();
        struct.credentials.read(iprot);
        struct.setCredentialsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.compactionId = iprot.readI64();
        struct.setCompactionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.extent = new org.apache.accumulo.core.dataImpl.thrift.TKeyExtent();
        struct.extent.read(iprot);
        struct.setExtentIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.files = new java.util.ArrayList<java.lang.String>(_list5.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.files.add(_elem6);
          }
        }
        struct.setFilesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.readRate = iprot.readI32();
        struct.setReadRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.writeRate = iprot.readI32();
        struct.setWriteRateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.iteratorSettings = new org.apache.accumulo.core.tabletserver.thrift.IteratorConfig();
        struct.iteratorSettings.read(iprot);
        struct.setIteratorSettingsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.type = org.apache.accumulo.core.tabletserver.thrift.CompactionType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reason = org.apache.accumulo.core.tabletserver.thrift.CompactionReason.findByValue(iprot.readI32());
        struct.setReasonIsSet(true);
      }
      if (incoming.get(11)) {
        struct.outputFile = iprot.readString();
        struct.setOutputFileIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
  private static void unusedMethod() {}
}

