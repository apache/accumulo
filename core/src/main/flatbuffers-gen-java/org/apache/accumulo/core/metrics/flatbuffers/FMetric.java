/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.accumulo.core.metrics.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FMetric extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static FMetric getRootAsFMetric(ByteBuffer _bb) { return getRootAsFMetric(_bb, new FMetric()); }
  public static FMetric getRootAsFMetric(ByteBuffer _bb, FMetric obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FMetric __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String type() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public org.apache.accumulo.core.metrics.flatbuffers.FTag tags(int j) { return tags(new org.apache.accumulo.core.metrics.flatbuffers.FTag(), j); }
  public org.apache.accumulo.core.metrics.flatbuffers.FTag tags(org.apache.accumulo.core.metrics.flatbuffers.FTag obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tagsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public org.apache.accumulo.core.metrics.flatbuffers.FTag.Vector tagsVector() { return tagsVector(new org.apache.accumulo.core.metrics.flatbuffers.FTag.Vector()); }
  public org.apache.accumulo.core.metrics.flatbuffers.FTag.Vector tagsVector(org.apache.accumulo.core.metrics.flatbuffers.FTag.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public double dvalue() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public int ivalue() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long lvalue() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createFMetric(FlatBufferBuilder builder,
      int nameOffset,
      int typeOffset,
      int tagsOffset,
      double dvalue,
      int ivalue,
      long lvalue) {
    builder.startTable(6);
    FMetric.addLvalue(builder, lvalue);
    FMetric.addDvalue(builder, dvalue);
    FMetric.addIvalue(builder, ivalue);
    FMetric.addTags(builder, tagsOffset);
    FMetric.addType(builder, typeOffset);
    FMetric.addName(builder, nameOffset);
    return FMetric.endFMetric(builder);
  }

  public static void startFMetric(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(1, typeOffset, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(2, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDvalue(FlatBufferBuilder builder, double dvalue) { builder.addDouble(3, dvalue, 0.0); }
  public static void addIvalue(FlatBufferBuilder builder, int ivalue) { builder.addInt(4, ivalue, 0); }
  public static void addLvalue(FlatBufferBuilder builder, long lvalue) { builder.addLong(5, lvalue, 0L); }
  public static int endFMetric(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFMetricBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedFMetricBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FMetric get(int j) { return get(new FMetric(), j); }
    public FMetric get(FMetric obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

