#! /usr/bin/env bash
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

#
# Environment variables that can be set to influence the behavior
# of this script
#
# ACCUMULO_LOCALHOST_ADDRESSES - set to a space delimited string of localhost names
#                                and addresses to override the default lookups
#

function print_usage {
  cat <<EOF
Usage: accumulo-cluster <command> (<argument> ...) [<option> ...]

Options:
  --dry-run                  Prints information and commands, but does not execute them

Commands:
  create-config              Creates cluster config
  start-here                 Starts all services on this node (deprecated, alias for "start --local --all")
  stop-here                  Stops all services on this node (deprecated, alias for "stop --local --all")
  restart [--local] [--all | [--manager] [--gc] [--monitor] [--tservers[=group]] [--sservers[=group]] [--compactors[=group]]
                             Restarts the Accumulo cluster
  start [--local] [--all | [--manager] [--gc] [--monitor] [--tservers[=group]] [--sservers[=group]] [--compactors[=group]]
                             Starts Accumulo cluster services
  stop [--local] [--all | [--manager] [--gc] [--monitor] [--tservers[=group]] [--sservers[=group]] [--compactors[=group]]
                             Stops Accumulo cluster services
  kill [--local] [--all | [--manager] [--gc] [--monitor] [--tservers[=group]] [--sservers[=group]] [--compactors[=group]]
                             Kills Accumulo cluster services

  Examples:

  accumulo-cluster start                                   # start all servers
  accumulo-cluster start --dry-run                         # print debug information and commands to be executed
  accumulo-cluster start --local                           # start all local services
  accumulo-cluster start --local --manager                 # start local manager services
  accumulo-cluster start --tservers                        # start all tservers
  accumulo-cluster start --tservers=group1                 # start all group1 tservers
  accumulo-cluster start --local --manager --tservers      # Start the local manager and local tservers

EOF
}

function parse_args {
  DEBUG=0
  ARG_LOCAL=0
  ARG_ALL=0
  ARG_MANAGER=0
  ARG_GC=0
  ARG_MONITOR=0
  ARG_TSERVER=0
  ARG_TSERVER_GROUP=""
  ARG_SSERVER=0
  ARG_SSERVER_GROUP=""
  ARG_COMPACTOR=0
  ARG_COMPACTOR_GROUP=""

  PARSE_OUTPUT=$(getopt -o "" --long "dry-run,all,local,manager,gc,monitor,tservers::,sservers::,compactors::" -n 'accumulo-cluster' -- "$@")
  eval set -- "$PARSE_OUTPUT"

  while true; do
    case "$1" in
      --dry-run)
        DEBUG=1
        debug "debug: ${DEBUG} args: ${PARSE_OUTPUT}"
        shift 1
        ;;
      --all)
        ARG_ALL=1
        shift 1
        ;;
      --local)
        ARG_LOCAL=1
        shift 1
        ;;
      --manager)
        ARG_MANAGER=1
        shift 1
        ;;
      --gc)
        ARG_GC=1
        shift 1
        ;;
      --monitor)
        ARG_MONITOR=1
        shift 1
        ;;
      --tservers)
        ARG_TSERVER=1
        if [ -n "$2" ]; then
          ARG_TSERVER_GROUP="$2"
        fi
        shift 2
        ;;
      --sservers)
        ARG_SSERVER=1
        if [ -n "$2" ]; then
          ARG_SSERVER_GROUP="$2"
        fi
        shift 2
        ;;
      --compactors)
        ARG_COMPACTOR=1
        if [ -n "$2" ]; then
          ARG_COMPACTOR_GROUP="$2"
        fi
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "Unhandled option: $1"
        print_usage
        exit 1
        ;;
    esac
  done

  # All and any of the others are mutually exclusive
  if [[ $ARG_ALL == 1 && ($ARG_MANAGER == 1 ||
    $ARG_GC == 1 || $ARG_MONITOR == 1 || $ARG_TSERVER == 1 ||
    $ARG_SSERVER == 1 || $ARG_COMPACTOR == 1) ]]; then
    echo "--all cannot be used with other options"
    print_usage
    exit 1
  fi

  # Handle the case where no args were passed
  if [[ $ARG_MANAGER == 0 && $ARG_GC == 0 &&
    $ARG_MONITOR == 0 && $ARG_TSERVER == 0 &&
    $ARG_SSERVER == 0 && $ARG_COMPACTOR == 0 ]]; then
    ARG_ALL=1
  fi

  if isDebug; then
    echo "DEBUG=$DEBUG"
    echo "ARG_ALL=$ARG_ALL"
    echo "ARG_LOCAL=$ARG_LOCAL"
    echo "ARG_MANAGER=$ARG_MANAGER"
    echo "ARG_GC=$ARG_GC"
    echo "ARG_MONITOR=$ARG_MONITOR"
    echo "ARG_TSERVER=$ARG_TSERVER"
    echo "ARG_TSERVER_GROUP=$ARG_TSERVER_GROUP"
    echo "ARG_SSERVER=$ARG_SSERVER"
    echo "ARG_SSERVER_GROUP=$ARG_SSERVER_GROUP"
    echo "ARG_COMPACTOR=$ARG_COMPACTOR"
    echo "ARG_COMPACTOR_GROUP=$ARG_COMPACTOR_GROUP"
  fi
}

function invalid_args {
  echo -e "Invalid arguments: $1\n"
  print_usage 1>&2
  exit 1
}

function parse_fail {
  echo "Failed to parse ${conf}/cluster.yaml"
  exit 1
}

isDebug() {
  [[ $DEBUG == 1 ]]
}

debug() {
  isDebug && echo "${@@P}"
}

debugAndRun() {
  debug "$@"
  if ! isDebug; then
    # shellcheck disable=SC2294
    eval "${@@P}"
  fi
}

function canRunOnHost() {

  if [[ $ARG_LOCAL == 0 ]]; then
    return 0
  fi

  if [[ -z $1 ]]; then
    echo "Host argument expected"
    exit 1
  fi

  local found=0
  for addr in "${LOCAL_HOST_ADDRESSES[@]}"; do
    if [[ $1 == "$addr" ]]; then
      found=1
      break
    fi
  done
  [[ $found == 1 ]]
}

function parse_config {

  if [[ ! -f ${conf}/cluster.yaml ]]; then
    echo "ERROR: A 'cluster.yaml' file was not found at ${conf}/cluster.yaml"
    echo "Please make sure it exists and is configured with the host information. Run 'accumulo-cluster create-config' to create an example configuration."
    exit 1
  fi

  trap 'rm -f "$CONFIG_FILE"' EXIT
  CONFIG_FILE=$(mktemp) || exit 1
  ${accumulo_cmd} org.apache.accumulo.core.conf.cluster.ClusterConfigParser "${conf}"/cluster.yaml "$CONFIG_FILE" || parse_fail
  #shellcheck source=/dev/null
  . "$CONFIG_FILE"
  debug "Parsed config:" && cat "$CONFIG_FILE"
  rm -f "$CONFIG_FILE"

  if [[ -z $MANAGER_HOSTS ]]; then
    echo "ERROR: managers not found in ${conf}/cluster.yaml"
    exit 1
  fi

  if [[ -z $COMPACTOR_GROUPS ]]; then
    echo "WARN: No compactor groups configured"
  else
    for group in $COMPACTOR_GROUPS; do
      Q="COMPACTOR_HOSTS_${group}"
      if [[ -z ${!Q} ]]; then
        echo "WARN: External compactor group $group configured, but no compactors configured for it"
      fi
    done
  fi

  tservers_found="false"
  if [[ -z $TSERVER_GROUPS ]]; then
    echo "WARN: No tablet server groups configured"
  else
    for group in $TSERVER_GROUPS; do
      G="TSERVER_HOSTS_${group}"
      if [[ -z ${!G} ]]; then
        echo "WARN: tablet server group $group configured, but no hosts configured for it"
      else
        tservers_found="true"
      fi
    done
  fi

  if [[ $tservers_found != "true" ]]; then
    echo "ERROR: There are no tablet servers configured, Accumulo requires at least 1 tablets server to host system tables"
    exit 1
  fi

  if [[ -n $SSERVER_GROUPS ]]; then
    for group in $SSERVER_GROUPS; do
      G="SSERVER_HOSTS_${group}"
      if [[ -z ${!G} ]]; then
        echo "WARN: scan server group $group configured, but no hosts configured for it"
      fi
    done
  fi

  unset manager1
  manager1=$(echo "${MANAGER_HOSTS}" | cut -d" " -f1)

  if [[ -z $MONITOR_HOSTS ]]; then
    echo "WARN: monitors not found in ${conf}/cluster.yaml, using first manager host $manager1"
    MONITOR_HOSTS=$manager1
  fi

  if [[ -z $GC_HOSTS ]]; then
    echo "WARN: gc not found in ${conf}/cluster.yaml, using first manager host $manager1"
    GC_HOSTS=$manager1
  fi

}

function execute_command() {
  control_cmd="$1"
  host="$2"
  service="$3"
  group="$4"
  shift 4

  S="${service^^}S_PER_HOST_${group}"
  servers_per_host="${!S:-1}"

  if [[ $ARG_LOCAL == 1 ]]; then
    debugAndRun ACCUMULO_CLUSTER_ARG="${servers_per_host}" "${bin}/accumulo-service" "$service" "$control_cmd" "-o" "general.process.bind.addr=$host" "$@"
  else
    debugAndRun "$SSH" "$host" "bash -c 'ACCUMULO_CLUSTER_ARG=${servers_per_host} ${bin}/accumulo-service \"$service\" \"$control_cmd\" \"-o\" \"general.process.bind.addr=$host\" ${*@Q}'"
  fi
}

function compute_localhost_addresses() {
  if [[ -n $ACCUMULO_LOCALHOST_ADDRESSES ]]; then
    read -r -a LOCAL_HOST_ADDRESSES <<<"$ACCUMULO_LOCALHOST_ADDRESSES"
  else
    read -r -a localhost_names <<<"$(getent hosts | tr '\n' ' ' | tr -s ' ' | tr ' ' '\n' | sort -u | tr '\n' ' ')"
    read -r -a localhost_interfaces <<<"$(hostname -I)"
    LOCAL_HOST_ADDRESSES+=("${localhost_names[@]}" "${localhost_interfaces[@]}")
  fi
  debug "${LOCAL_HOST_ADDRESSES[*]}"
}

function control_services() {
  unset DISPLAY
  operation="$1"

  if [[ $operation != "start" &&
    $operation != "stop" &&
    $operation != "kill" ]]; then
    echo "Invalid operation: $operation"
    exit 1
  fi

  if [[ $ARG_ALL == 1 && $operation == "stop" ]]; then
    echo "Stopping Accumulo cluster..."
    if ! isDebug; then
      if ! ${accumulo_cmd} admin stopAll; then
        echo "Invalid password or unable to connect to the manager"
        echo "Initiating forced shutdown in 15 seconds (Ctrl-C to abort)"
        sleep 10
        echo "Initiating forced shutdown in  5 seconds (Ctrl-C to abort)"
      else
        echo "Accumulo shut down cleanly"
        echo "Utilities and unresponsive servers will shut down in 5 seconds (Ctrl-C to abort)"
      fi
      sleep 5
    fi
  elif [[ $ARG_LOCAL == 1 && $ARG_TSERVER == 1 && $operation == "stop" ]]; then
    tserver_groups=$TSERVER_GROUPS
    if [[ -n $ARG_TSERVER_GROUP ]]; then
      tserver_groups=$ARG_TSERVER_GROUP
    fi
    for addr in "${LOCAL_HOST_ADDRESSES[@]}"; do
      for group in $tserver_groups; do
        G="TSERVER_HOSTS_${group}"
        for tserver in ${!G}; do
          if echo "$tserver" | grep -q "$addr"; then
            if ! isDebug; then
              ${accumulo_cmd} admin stop "$addr"
            else
              debug "Stopping tservers on $addr via admin command"
            fi
          fi
        done
      done
    done
  elif [[ $ARG_ALL == 1 && $operation == "kill" ]]; then
    echo "Killing Accumulo cluster..."
  fi

  if [[ $ARG_ALL == 1 || $ARG_TSERVER == 1 ]]; then
    tserver_groups=$TSERVER_GROUPS
    if [[ -n $ARG_TSERVER_GROUP ]]; then
      tserver_groups=$ARG_TSERVER_GROUP
    fi
    for group in $tserver_groups; do
      echo "${cmd}ing tablet servers for group $group"
      count=1
      hosts="TSERVER_HOSTS_${group}"
      for tserver in ${!hosts}; do
        if canRunOnHost "$tserver"; then
          echo -n "."
          execute_command "$operation" "$tserver" tserver "${group}" "-o" "tserver.group=$group"
          if ((++count % 72 == 0)); then
            echo
            wait
          fi
        fi
      done
    done
    echo "done"
  fi

  if [[ $ARG_ALL == 1 || $ARG_MANAGER == 1 ]]; then
    for manager in $MANAGER_HOSTS; do
      if canRunOnHost "$manager"; then
        execute_command "$operation" "$manager" manager "default"
      fi
    done
  fi

  if [[ $ARG_ALL == 1 || $ARG_GC == 1 ]]; then
    for gc in $GC_HOSTS; do
      if canRunOnHost "$gc"; then
        execute_command "$operation" "$gc" gc "default"
      fi
    done
  fi

  if [[ $ARG_ALL == 1 || $ARG_MONITOR == 1 ]]; then
    for monitor in $MONITOR_HOSTS; do
      if canRunOnHost "$monitor"; then
        execute_command "$operation" "$monitor" monitor "default"
      fi
    done
  fi

  if [[ $ARG_ALL == 1 || $ARG_SSERVER == 1 ]]; then
    sserver_groups=$SSERVER_GROUPS
    if [[ -n $ARG_SSERVER_GROUP ]]; then
      sserver_groups=$ARG_SSERVER_GROUP
    fi
    for group in $sserver_groups; do
      echo "${cmd}ing scan servers for group $group"
      hosts="SSERVER_HOSTS_${group}"
      for sserver in ${!hosts}; do
        if canRunOnHost "$sserver"; then
          execute_command "$operation" "$sserver" sserver "${group}" "-o" "sserver.group=$group"
        fi
      done
    done
  fi

  if [[ $ARG_ALL == 1 || $ARG_COMPACTOR == 1 ]]; then
    compactor_groups=$COMPACTOR_GROUPS
    if [[ -n $ARG_COMPACTOR_GROUP ]]; then
      compactor_groups=$ARG_COMPACTOR_GROUP
    fi
    for group in $compactor_groups; do
      echo "${cmd}ing compactors for group $group"
      hosts="COMPACTOR_HOSTS_${group}"
      for compactor in ${!hosts}; do
        if canRunOnHost "$compactor"; then
          execute_command "$operation" "$compactor" compactor "${group}" "-o" "compactor.group=$group"
        fi
      done
    done
  fi

  if [[ $ARG_LOCAL == 0 && $ARG_ALL == 1 && ($operation == "stop" || $operation == "kill") ]]; then
    if ! isDebug; then
      echo "Cleaning all server entries in ZooKeeper"
      ${accumulo_cmd} org.apache.accumulo.server.util.ZooZap -manager -tservers -compactors -sservers
    fi
  fi

}

function main() {

  if [[ -z $1 ]]; then
    invalid_args "<command> cannot be empty"
  fi

  # Resolve base directory
  SOURCE="${BASH_SOURCE[0]}"
  while [ -h "${SOURCE}" ]; do
    bin="$(cd -P "$(dirname "${SOURCE}")" && pwd)"
    SOURCE="$(readlink "${SOURCE}")"
    [[ ${SOURCE} != /* ]] && SOURCE="${bin}/${SOURCE}"
  done
  bin="$(cd -P "$(dirname "${SOURCE}")" && pwd)"
  basedir=$(cd -P "${bin}"/.. && pwd)
  conf="${ACCUMULO_CONF_DIR:-${basedir}/conf}"

  accumulo_cmd="${bin}/accumulo"
  SSH='ssh -qnf -o ConnectTimeout=2'

  cmd="$1"
  shift
  parse_args "$@"

  compute_localhost_addresses

  case "${cmd}" in
    create-config)
      if [[ -f "$conf"/cluster.yaml ]]; then
        echo "ERROR : ${conf}/cluster.yaml already exists, not overwriting"
        exit 1
      fi
      cat <<EOF >"$conf"/cluster.yaml
manager:
  - localhost

monitor:
  - localhost

gc:
  - localhost

tserver:
  default:
    servers_per_host: 1
    hosts:
      - localhost

compactor:
  default:
    servers_per_host: 1
    hosts:
      - localhost

sserver:
  default:
    servers_per_host: 1
    hosts:
      - localhost

EOF
      ;;
    restart)
      parse_config
      control_services stop
      control_services kill
      # Make sure the JVM has a chance to fully exit
      sleep 1
      control_services start
      ;;
    start)
      parse_config
      control_services start
      ;;
    stop)
      parse_config
      control_services stop
      ;;
    kill)
      parse_config
      control_services kill
      ;;
    start-here)
      parse_config
      ARG_ALL=1
      ARG_LOCAL=1
      control_services start
      ;;
    stop-here)
      parse_config
      ARG_ALL=1
      ARG_LOCAL=1
      control_services stop
      control_services kill
      ;;
    *)
      invalid_args "${cmd} is an invalid <command>"
      ;;
  esac
}

main "$@"
