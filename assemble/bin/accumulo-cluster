#! /usr/bin/env bash
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

function print_usage {
  cat <<EOF
Usage: accumulo-cluster <command> (<argument> ...)

Commands:
  create-config       Creates cluster config
  restart             Restarts the Accumulo cluster
  start               Starts Accumulo cluster
  stop                Stops Accumulo cluster
  kill                Kills Accumulo cluster
  start-non-tservers  Starts all services except tservers
  start-tservers      Starts all tservers on cluster
  stop-tservers       Stops all tservers on cluster
  start-here          Starts all services on this node
  stop-here           Stops all services on this node
EOF
  exit 1
}

function invalid_args {
  echo -e "Invalid arguments: $1\n"
  print_usage 1>&2
  exit 1
}

function parse_config {
  if [[ -f ${conf}/slaves ]]; then
    echo "ERROR: A 'slaves' file was found in ${conf}/"
    echo "Accumulo now uses cluster host configuration information from 'cluster.yml' and requires that the 'slaves' file not be present to reduce confusion."
    echo "Please rename the 'slaves' file to 'tservers' or remove it if both exist."
    exit 1
  fi

  if [[ ! -f ${conf}/cluster.yml ]]; then
    echo "ERROR: A 'cluster.yml' file was not found at ${conf}/cluster.yml"
    echo "Please make sure it exists and is configured with the host information. Run 'create-config' to create an example configuration."
    exit 1
  fi

  config=$(${accumulo_cmd} org.apache.accumulo.core.conf.cluster.ClusterConfigParser ${conf}/cluster.yml)

  declare -A HOSTS

  HOSTS["MANAGERS"]=$(grep managers $config | awk -F':' '{ print $2 }')
  HOSTS["MONITORS"]=$(grep monitors $config | awk -F':' '{ print $2 }')
  HOSTS["GC"]=$(grep gc $config | awk -F':' '{ print $2 }')
  HOSTS["TRACER"]=$(grep tracer $config | awk -F':' '{ print $2 }')
  HOSTS["TSERVERS"]=$(grep tservers $config | awk -F':' '{ print $2 }')

  grep "compaction" $config $2>1 > /dev/null
  compaction_in_config=$?

  if [[ $compaction_in_config -eq 0 ]]; then
    HOSTS["COMPACTION_COORDINATORS"]=$(grep "compaction.coordinators" $file | awk -F':' '{ print $2 }')
    HOSTS["COMPACTION_QUEUES"]=$(grep "compaction.compactors.queues" $file | awk -F':' '{ print $2 }')

    IFS_ORIG=$IFS
    IFS=","
    for queue in ${HOSTS["COMPACTION_QUEUES"]}; do
      HOSTS["COMPACTORS_$queue"]=$(grep "compaction.compactors.$queue" $file | awk -F':' '{ print $2 }')
    done
    IFS=$IFS_ORIG
  fi

  if [[ ${#HOSTS["MANAGERS"]} -eq 0 ]]; then
    echo "ERROR: managers not found in ${conf}/cluster.yml"
    exit 1
  fi

  if [[ ${#HOSTS["TSERVERS"]} -eq 0 ]]; then
    echo "ERROR: tservers not found in ${conf}/cluster.yml"
    exit 1
  fi

  unset manager1
  manager1=$(echo "${HOSTS["MANAGERS"]}" | cut -d"," -f1)

  if [[ ${#HOSTS["MONITORS"]} -eq 0 ]]; then
    echo "WARN: monitors not found in ${conf}/cluster.yml, using first manager host $manager1"
    HOSTS["MONITORS"]=$manager1
    exit 1
  fi

  if [[ ${#HOSTS["GC"]} -eq 0 ]]; then
    echo "WARN: gc not found in ${conf}/cluster.yml, using first manager host $manager1"
    HOSTS["GC"]=$manager1
    exit 1
  fi

  if [[ ${#HOSTS["TRACER"]} -eq 0 ]]; then
    echo "WARN: tracer not found in ${conf}/cluster.yml, using first manager host $manager1"
    HOSTS["TRACER"]=$manager1
    exit 1
  fi
}

function get_ip() {
  ip_addr=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')
  if [[ $? != 0 ]]; then
    ip_addr=$(getent ahosts "$(hostname -f)" | grep DGRAM | cut -f 1 -d ' ')
  fi
  echo "$ip_addr"
}

function control_service() {
  control_cmd="$1"
  host="$2"
  service="$3"

  local last_instance_id; last_instance_id=1
  [[ "$service" == "tserver" ]] && last_instance_id=${NUM_TSERVERS:-1}

  for (( inst_id=1; inst_id<=last_instance_id; inst_id++ ))
  do
    ACCUMULO_SERVICE_INSTANCE=""
    [[ "$service" == "tserver" && ${NUM_TSERVERS:-1} -gt 1 ]] && ACCUMULO_SERVICE_INSTANCE=${inst_id}

    if [[ $host == localhost || $host == "$(hostname -s)" || $host == "$(hostname -f)" || $host == $(get_ip) ]] ; then
      ACCUMULO_SERVICE_INSTANCE="${ACCUMULO_SERVICE_INSTANCE}" "${bin}/accumulo-service" "$service" "$control_cmd"
    else
      $SSH "$host" "bash -c 'ACCUMULO_SERVICE_INSTANCE=${ACCUMULO_SERVICE_INSTANCE} ${bin}/accumulo-service \"$service\" \"$control_cmd\" \"{$@:4}'"
    fi
  done
}

function start_service() {
  control_service start "$@"
}

function start_tservers() {
  echo -n "Starting tablet servers ..."
  count=1
  IFS_ORIG=$IFS
  IFS=","
  for server in ${HOSTS["TSERVERS"]}; do
    echo -n "."
    start_service "$server" tserver &
    if (( ++count % 72 == 0 )) ;
    then
      echo
      wait
    fi
  done
  echo " done"
  IFS=$IFS_ORIG
}

function start_all() {
  unset DISPLAY

  if [[ "$1" != "--no-tservers" ]]; then
    start_tservers
  fi

  IFS_ORIG=$IFS
  IFS=","

  for manager in ${HOSTS["MANAGERS"]}; do
    start_service "$manager" manager
  done

  for gc in "${HOSTS["GC"]}"; do
    start_service "$gc" gc
  done

  for monitor in ${HOSTS["MONITORS"]}; do
    start_service "$monitor" monitor
  done

  for tracer in ${HOSTS["TRACER"]}; do
    start_service "$tracer" tracer
  done

  for coordinator in ${HOSTS["COMPACTION_COORDINATORS"]}; do
    start_service "$coordinator" compaction-coordinator
  done

  for queue in ${HOSTS["COMPACTION_QUEUES"]}; do
    for compactor in ${HOSTS["COMPACTORS_$queue"]}; do
      start_service "$compactor" compactor "-q $queue"
    done
  done

  IFS=$IFS_ORIG

}

function start_here() {

  local_hosts="$(hostname -a 2> /dev/null) $(hostname) localhost 127.0.0.1 $(get_ip)"

  IFS_ORIG=$IFS
  IFS=","

  for host in $local_hosts; do
    for tserver in ${HOSTS["TSERVERS"]}; do
      if grep -q "^${host}\$" "$tserver"; then
        start_service "$host" tserver
        break
      fi
    done
  done

  for host in $local_hosts; do
    for manager in ${HOSTS["MANAGERS"]}; do
      if grep -q "^${host}\$" "$manager"; then
        start_service "$host" manager
        break
      fi
    done
  done

  for host in $local_hosts; do
    for gc in ${HOSTS["GC"]}; do
      if grep -q "^${host}\$" "$gc"; then
        start_service "$host" gc
        break
      fi
    done
  done

  for host in $local_hosts; do
    for monitor in ${HOSTS["MONITORS"]}; do
      if grep -q "^${host}\$" "$monitor"; then
        start_service "$host" monitor
        break
      fi
    done
  done

  for host in $local_hosts; do
    for tracer in ${HOSTS["TRACER"]}; do
      if grep -q "^${host}\$" "$tracer"; then
        start_service "$host" tracer
        break
      fi
    done
  done

  for host in $local_hosts; do
    for coordinator in ${HOSTS["COMPACTION_COORDINATORS"]}; do
      if grep -q "^${host}\$" "$coordinator"; then
        start_service "$coordinator" compaction-coordinator
      fi
    done
  done

  for queue in ${HOSTS["COMPACTION_QUEUES"]}; do
    for host in $local_hosts; do
      for compactor in ${HOSTS["COMPACTORS_$queue"]}; do
        if grep -q "^${host}\$" "$compactor"; then
          start_service "$compactor" compactor "-q $queue"
        fi
      done
    done
  done

  IFS=$IFS_ORIG

}

function end_service() {
  control_service "$@"
}

function stop_service() {
  end_service "stop" "$1" "$2"
}

function kill_service() {
  end_service "kill" "$1" "$2"
}

function stop_tservers() {

  IFS_ORIG=$IFS
  IFS=","
  echo "Stopping unresponsive tablet servers (if any)..."
  for host in ${HOSTS["TSERVERS"]}; do
    stop_service "$host" tserver &
  done

  sleep 10

  echo "Stopping unresponsive tablet servers hard (if any)..."
  for host in ${HOSTS["TSERVERS"]}; do
    kill_service "$host" tserver &
  done
  IFS=$IFS_ORIG

  echo "Cleaning tablet server entries from zookeeper"
  ${accumulo_cmd} org.apache.accumulo.server.util.ZooZap -tservers
}

function kill_all() {
  echo "Killing Accumulo cluster..."

  IFS_ORIG=$IFS
  IFS=","
  for manager in ${HOSTS["MANAGERS"]}; do
    kill_service "$manager" manager
  done

  for gc in "${HOSTS["GC"]}"; do
    kill_service "$gc" gc
  done

  for monitor in ${HOSTS["MONITORS"]}; do
    kill_service "$monitor" monitor
  done

  for tracer in ${HOSTS["TRACER"]}; do
    kill_service "$tracer" tracer
  done

  for host in ${HOSTS["TSERVER"]}; do
    kill_service "$host" tserver
  done

  for coordinator in ${HOSTS["COMPACTION_COORDINATORS"]}; do
    kill_service "$coordinator" compaction-coordinator
  done

  for queue in ${HOSTS["COMPACTION_QUEUES"]}; do
    for compactor in ${HOSTS["COMPACTORS_$queue"]}; do
      kill_service "$compactor" compactor
    done
  done

  IFS=$IFS_ORIG

  echo "Cleaning all server entries in ZooKeeper"
  ${accumulo_cmd} org.apache.accumulo.server.util.ZooZap -manager -tservers -tracers
}


function stop_all() {
  echo "Stopping Accumulo cluster..."
  if ! ${accumulo_cmd} admin stopAll
  then
    echo "Invalid password or unable to connect to the manager"
    echo "Initiating forced shutdown in 15 seconds (Ctrl-C to abort)"
    sleep 10
    echo "Initiating forced shutdown in  5 seconds (Ctrl-C to abort)"
  else
    echo "Accumulo shut down cleanly"
    echo "Utilities and unresponsive servers will shut down in 5 seconds (Ctrl-C to abort)"
  fi

  sleep 5

  # Look for processes not killed by 'admin stopAll'
  IFS_ORIG=$IFS
  IFS=","
  for end_cmd in "stop" "kill" ; do

    for manager in ${HOSTS["MANAGERS"]}; do
      end_service "$manager" manager $end_cmd
    done

    for gc in "${HOSTS["GC"]}"; do
      end_service "$gc" gc $end_cmd
    done

    for monitor in ${HOSTS["MONITORS"]}; do
      end_service "$monitor" monitor $end_cmd
    done

    for tracer in ${HOSTS["TRACER"]}; do
      end_service "$tracer" tracer $end_cmd
    done

    for coordinator in ${HOSTS["COMPACTION_COORDINATORS"]}; do
      end_service "$coordinator" compaction-coordinator
    done

    for queue in ${HOSTS["COMPACTION_QUEUES"]}; do
      for compactor in ${HOSTS["COMPACTORS_$queue"]}; do
        end_service "$compactor" compactor
      done
    done

  done
  IFS=$IFS_ORIG

  # stop tserver still running
  stop_tservers

  echo "Cleaning all server entries in ZooKeeper"
  ${accumulo_cmd} org.apache.accumulo.server.util.ZooZap -manager -tservers -tracers
}

function stop_here() {
  # Determine hostname without errors to user
  hosts_to_check=("$(hostname -a 2> /dev/null | head -1)" "$(hostname -f)")

  if grep -Eq 'localhost|127[.]0[.]0[.]1' "${conf}/tservers"; then
    ${accumulo_cmd} admin stop localhost
  else
    IFS_ORIG=$IFS
    IFS=","
    for host in "${hosts_to_check[@]}"; do
      for tserver in ${HOSTS["TSERVERS"]}; do
        if grep -q "$host" "$tserver"; then
          ${accumulo_cmd} admin stop "$host"
        fi
      done
    done
    IFS=$IFS_ORIG
  fi

  for host in "${hosts_to_check[@]}"; do
    for end_cmd in "stop" "kill"; do
      for svc in tserver gc manager monitor tracer compaction-coordinator compactor; do
        end_service "$host" $svc $end_cmd
      done
    done
  done
}

function main() {

  if [[ -z $1 ]]; then
    invalid_args "<command> cannot be empty"
  fi

  # Resolve base directory
  SOURCE="${BASH_SOURCE[0]}"
  while [ -h "${SOURCE}" ]; do
     bin="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"
     SOURCE="$(readlink "${SOURCE}")"
     [[ "${SOURCE}" != /* ]] && SOURCE="${bin}/${SOURCE}"
  done
  bin="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"
  basedir=$( cd -P "${bin}"/.. && pwd )
  conf="${ACCUMULO_CONF_DIR:-${basedir}/conf}"

  accumulo_cmd="${bin}/accumulo"
  SSH='ssh -qnf -o ConnectTimeout=2'

  case "$1" in
    create-config)
      cat <<EOF > $conf/cluster.yml
managers:
  - localhost

monitors:
  - localhost

tracer:
  - localhost

gc:
  - localhost

tservers:
  - localhost

#compaction:
#  coordinators:
#    - localhost
#  compactors:
#    - queues:
#      - q1
#      - q2
#    - q1:
#        - localhost
#    - q2:
#        - localhost
      EOF
      ;;
    restart)
      parse_config
      stop_all
      # Make sure the JVM has a chance to fully exit
      sleep 1
      start_all
      ;;
    start)
      parse_config
      start_all
      ;;
    stop)
      parse_config
      stop_all
      ;;
    kill)
      parse_config
      kill_all
      ;;
    start-non-tservers)
      parse_config
      start_all --no-tservers
      ;;
    start-tservers)
      parse_config
      start_tservers
      ;;
    start-here)
      parse_config
      start_here
      ;;
    stop-tservers)
      parse_config
      stop_tservers
      ;;
    stop-here)
      parse_config
      stop_here
      ;;
    *)
      invalid_args "'$1' is an invalid <command>"
      ;;
  esac
}

main "$@"
